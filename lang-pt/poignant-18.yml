    - As Partes da Conversa: >

        Assim como a faixa branca nas costas do gambá e a branca e enrolada grinalda da noiva, várias partes
        da conversa têm sinalizações visuais para te ajudar a identificá-las.  Pontuação, maiúsculas e minúsculas,
        irão ajudar seu cérebro ver pedaços de código e reconhecê-los intensamente.
        Sua mente vai gritar frequentemente _Hey, Eu conheço aquele cara!_  Você também poderá
        contar vantagem em conversas com outros Rubistas.


        Tente se focar na aparência de cada uma destas partes da conversa.  O resto do livro vai
        entrar em detalhes.  Eu darei pequenas descrições de cada parte da conversa, mas você não precisa
        entender a explicação.  Ao término deste capítulo, você deve estar apto a reconhecer 
        cada parte de um programa Ruby.


        h3. Variáveis


        Qualquer palavra simples, em minúsculas, é uma variável no Ruby.  Variáveis podem  ser compostas por
        letras, dígitos e travessões.


        bq. @x@, @y@, @banana2@ or @telefone_pruma_codorna@ são exemplos.


        Variáveis são como apelidos.  Lembra quando todo mundo te chamava de Pete Fedido?
        As pessoas diziam, "Vem aqui, Pete Fedido!"  E todo mundo milagrosamente sabia que 
        você era o Pete Fedido.


        Com variáveis, você dá um apelido a algo que você use frequentemente.  Por exemplo, vamos dizer
        que você tem um orfanato.  É um orfanato maléfico.  E quando o Papai Warbucks vem comprar 
        mais crianças, nós insistimos que ele nos pague *cento e vinte um reais e oito centavos* pelo ursinho
        de pelúcia da criança, o qual ela ficou apegada nos momentos sombrios que passou vivendo neste pesadelo de
        custódia.


        bq. @taxa_de_urso_de_pelucia = 121.08@


        Mais tarde, quando você pegar ele no caixa (uma registradora turbinada que roda
        Ruby!), você vai precisar juntar as somas em um *total*.


        bq. @total = taxa_de_orfao + taxa_de_urso_de_pelucia + gorjeta@


        Estes apelidos para variáveis vêm a calhar.  E no submundo sedento das vendas infantis, qualquer ajuda
        é bem-vinda, tenho certeza.


        !i/the.foxes-4a.png(Eles zombam dos meus exemplos.)!
 


        h3. Números


        O tipo mais básico de número é um _integer_ (número inteiro), uma *série de dígitos* que podem começar
        com um *sinal de menos ou de mais*.


        bq. @1@, @23@, e @-10000@ são exemplos.


        Vírgulas não são permitidas em números, mas travessões sim.  Então se você acha melhor
        marcar os milhares para que o número fique mais legível, use um travessão.


        bq. @habitantes = 12_000_000_000@


        Números decimais são chamados de _floats_ (números reais ou ponto flutuante) no Ruby.  
        Números reais consistem em números com
        *casas decimais* ou *em notação científica*.


        bq. @3.14@, @-808.08@ e @12.043e-04@ são exemplos.



        h3. Strings (Conjunto de Caracteres)


        Strings são quaisquer tipos de caracteres (letras, dígitos, pontuação) cercados por aspas.  
        *Aspas* simples ou duplas, são usadas para se criar strings.


        bq. @"laboratoriodomar"@, @'2021'@, or @"Estes quadrinhos são hilários!"@
        são exemplos.


        Quando você cerca caracteres em aspas, eles ficam guardados juntos como uma string só.
        

        Pense num repórter que está anotando as baboseiras de uma celebridade incoerente.  "Eu estou
        muito mais sábia," disse Avril Lavigne.  "Agora eu sei como as coisas são -- o que você tem que fazer
        e como trabalhar isso."


        <pre>
          frase_da_avril = "Eu estou muito mais sábia.  Agora eu sei 
          como as coisas são -- o que você tem 
          que fazer e como trabalhar isso."
        </pre>


        Então, assim como nós guardamos um número na variável *taxa_de_urso_de_pelucia,* agora nós estamos guardando
        uma coleção de caracteres (uma string) na variável *frase_da_avril*.  O repórter envia esta frase
        para impressão, que por acaso usa  Ruby para operar as impressoras.


        <pre>
         <setup>
           frase_da_oprah = "O"
           frase_da_avril = "A"
           debate_ashlee_simpson = "D"
         </setup>
         print frase_da_oprah
         print frase_da_avril
         print debate_ashlee_simpson
        </pre>


        !i/the.foxes-4b.png(Eles desejam estar nos meus exemplos.)!



        h3. Symbols (Símbolos)


        Símbolos são palavras que parecem variáveis.  Novamente, elas podem conter letras,
        dígitos e travessões.  Mas elas *começam com dois pontos*.


        bq. @:a@, @:b@, ou @:ponce_de_leon@ são exemplos.


        Símbolos são strings leves.  Geralmente, símbolos são usados em situações em que você precisa de uma string
        mas não vai imprimí-la na tela.


        Você pode dizer que um símbolo é pouco mais digerível para o computador.  É como um anti-ácido.  Os dois pontos
        indicam as bolhas saindo do estômago do  seu computador enquanto ele digere o símbolo.  Ah.  Doce, doce alívio.


        !i/the.foxes-4c.png(Bacon Pedaçudo!!)!



        h3. Constantes


        Constantes são palavras como variáveis, mas constantes são *maiúsculas*.  Se variáveis são os
        substantivos do Ruby, então pense nas constantes como substantivos próprios.


        bq. @Time@, @Array@ or @Bunny_Lake_Desapareceu@ são exemplos.


        Em inglês, substantivos próprios têm a primeira letra maiúscula.  O Edifício Empire State.  Você não pode simplesmente
        mudar o Edíficio Empire State.  Você não pode simplesmente decidir que o Edifício Empire State é outra coisa.
        Substantivos próprios são assim.  Eles se referem a algo muito específico e que usualmente não
        muda com o tempo.


        Do mesmo modo, constantes não podem ser alteradas depois de criadas.


        bq. @EdificioEmpireState = "350 5th Avenue, NYC, NY"@


        Se tentarmos mudar a constante, Ruby vai reclamar com a gente.  Coisas assim desagradam ele.


        !i/the.foxes-4d.png(Vamos lá, bacon pedaçudo.)!



        h3. Metódos


        Se variáveis e constantes são substantivos, então métodos são verbos.
        Métodos geralmente estão ligados ao final das variáveis e constantes por um *ponto*.  Você já viu 
        métodos trabalhando.


        bq. @porta_da_frente.abra@


        Acima, *abra* é o método.  Nesta ação, o verbo. Em alguns casos, você verá ações ligadas juntas.


        bq. @porta_da_frente.abra.feche@


        Instruímos o computador a abrir a porta da frente e depois imediatamente fechá-la.


        bq. @porta_da_frente.esta_aberta?@


        Acima temos uma ação também.  Estamos instruindo o computador a testar a porta para ver se está aberta.
        O método poderia se chamar @Porta.teste_para_ver_se_esta_aberta@, mas o nome @esta_aberta?@ é sucinto e 
        também correto.  Exclamações e interrogações podem ser usadas em nomes de métodos.


        h3. Argumentos de Método


        Um método talvez precise de mais informação para realizar sua ação.  Se quisermos que o computador
        pinte a porta, devemos prover uma cor também.


        Argumentos de método vão ligados ao final do método.  Os argumentos estão geralmente cercados por
        *parênteses* e separados por *vírgulas*.


        bq. @porta_da_frente.pintar( 3, :vermelho )@


        O código acima pinta a porta da frente com três demãos de vermelho.


        Pense nisso como um tubo interno que o método carrega, contendo suas instruções extras.
        Os parênteses formam as redondas e molhadas paredes do tubo.  As vírgulas são os pés de cada argumento,
        saindo pra fora da beirada.  O último argumento tem o pé preso embaixo então eles não aparecem.


        Como um barco de bóias, métodos com argumentos podem ser ligados.


        bq. @porta_da_frente.pintar( 3, :vermelho ).secar( 30 ).fechar()@


        O código acima pinta a porta da frente com três demãos de vermelho, seca por trinta minutos e fecha a porta.  Mesmo que
        o último método não tenha argumentos, você pode colocar parênteses se quiser.  Um cano vazio não tem
        muito uso, então os parênteses são geralmente deixados de lado.


        Alguns métodos (como @print@) são métodos do kernel.  Estes métodos são usados por todo Ruby.  Já que eles
        são tão comuns, você não usa o ponto.


        bq. @print "Veja, sem ponto."@


        h3. Métodos de Classe


        Assim como os métodos descritos acima (também chamdos métodos _ de instância_), métodos de classe
        são geralmente ligados depois de variáveis e constantes.  Ao invés de ponto, usa-se *dois pontos duplo.*


        bq. @Porta::new( :carvalho )@


        Como foi visto acima, o método de classe @new@ é mais usado para se criar coisas.  No exemplo cima, estamos pedindo
        ao Ruby para fazer uma porta de carvalho nova para nós.  Claro, o Ruby não tem conhecimento de como fazer uma
        porta--assim como uma pilha de madeira, madeireiros, e aquelas longas, nervosas, serras acionadas por dois homens.


        !i/the.foxes-4e.png(Muito bacon pedaçudo para dar um rolê.)!



        h3. Variáveis Globais


        Variáveis que começam com um *cifrão* são globais.


        bq. @$x@, @$1@, @$pedacudo@ and @$BAcOn_PeDAcUDo@ são exemplos.


        A maioria das váriaveis são temporárias por natureza.  Algumas partes do seu programa são como casas.
        Você entra e elas tem suas próprias variáveis.  Em um casa, voce pode der um @pai@ que representa
        Archie, um caixeiro-viajante colecionador de esqueletos.  Em outra casa, @pai@ pode representar
        Peter, um domador de leões com grande apreço por flanela.  Cada casa tem um sentido próprio para @pai@.


        Com variáveis globais, você garante que a variável será a mesma em cada casinha.
        O sinal de cifrão é bem apropriado.  Todo lar Americano respeita o valor do cifrão.  Somos
        doidos pela coisa.  Tente bater em qualquer porta na América e dê a eles dinheiro.  Eu posso garantir
        que você não verá a mesma reação se bater em uma porta e oferecer Peter, um domador de leões com grande
        apreço por flanela.


        Variáveis globais podem ser usadas em qualquer lugar no seu programa.  Elas nunca saem da vista.



        h3. Variáveis de Instância


        Variáveis que começam com uma *arroba* são variáveis de instância.


        bq. @@x@, @@y@, e @@somente_o_maior_pedaco_de_bacon_que_eu_ja_vi@ são exemplos.


        Estas variáveis são muito usadas para se definir atributos de alguma coisa.  Por exemplo, você pode
        prover o Ruby com a largura da @porta_da_frente@ criando a variável @@largura@ dentro daquela
        @porta_da_frente@.  Variáveis de instância são usadas para se definir características de um objeto
        em Ruby.


        Pense no símbolo *arroba (at)* como significando *atributo*.
        


        h3. Variáveis de Classe


        Variáveis que começam com *duas arrobas* são variáveis de classe.


        bq. @@@x@, @@@y@, e @@@vou_pegar_seus_bacons_pedacudos_e_ensinar_uma_licao_a_voces_dois@ são exemplos.


        Variáveis de classe são usadas, também, para se definir atributos.  Mas ao invés de definir um atributo
        a apenas um objeto no Ruby, variáveis de classe dão um atributo a vários objetos relacionados no Ruby.
        Se as variáveis de instância estipulam atributos para só uma @porta_da_frente@, então variáveis de classe 
        estipulam atributoes pra tudo que for @Porta@.


        Pense no prefixo da *dupla arroba* significando *atribua a todos*.  Adicionalmente, você pode pensar em um
        esquadrão de *AT-ATs* do _Guerra nas Estrelas_, que são comandados pelo Ruby.  Você muda uma variável de classe
        e não apenas uma muda, todas elas mudam.


        !i/the.foxes-4f.png(Woohoo! Bacon pedaçudo cumprido!)!



        h3. Blocos


        Qualquer código cercado por *colchetes* é um bloco.


        bq. @2.times { print "Sim, Tenho usado bacon pedaçudo nos meus exemplos, mas não farei de novo!" }@ é um exemplo.


        Com blocos, você pode agrupar pedaços de instruções juntas, assim elas pode ser passadas
        pelo seu programa.  
        Os colchetes dão a aparência de garras de caranguejo que pegaram o código e o estão
        segurando.  Quando você ver estas duas garras, lembre-se que o código dentro
        foi prensado em uma só unidade.


        É como uma daquelas caixinhas da Hello Kitty que eles vendem no shopping
        que vêm lotadas de pequenos lápis e papel microscópico, espremidos numa bolsa
        transparente e brilhante que pode ser escondida na palma da mão para operações secretas.  
        Exceto que, blocos não ofuscam sua visão.


        As chaves pode ser substituídas pelas palavras *do* e *end*, o que é bacana se seu bloco for
        maior que uma linha.


        <pre>
         loop do
           print "Bem melhor."
           print "Ah.  Mais espaço!"
           print "Minhas costas estavam me matando dentro daquelas garras de caranguejo."
         end
         <stdout>Bem melhor.Ah.  Mais espaço!Minhas costas estavam me matando dentro daquelas garras de caranguejo.</stdout>
        </pre>
        


        h3. Argumentos de Bloco


        Argumentos de bloco são uma série de variáveis cercadas por símbolos *tal que* 
        e separadas por *vírgulas*.


        bq. @|en||x|@, @|x,y|@, e @|cima, baixo, todo_lado|@ são exemplos.


        Argumentos de bloco são usados no início do bloco.


        bq. @{ |x,y| x + y }@


        No código acima, @|x,y|@ são os argumentos. Depois dos argumentos, temos um pedaço de código.
        A expressão @x + y@ soma os argumentos.


        Eu gosto de pensar nos símbolos tal que representando um túnel.  Ele dão a aparência de uma
        calha na qual as váriaveis estão descendo.  (O @x@ desce com as pernas abertas, enquanto o @y@
        harmoniosamente cruza as pernas.)  Essa calha age como uma passagem entre os blocos e o mundo lá fora.  


        Variáveis são passadas por essa calha (ou túnel) pra dentro do bloco.


        !i/the.foxes-4g.png(E então, a verdade deplorável.)!



        h3. Ranges (Intervalos)


        Um range é formado por dois valores cercados por *parênteses* e separados por *reticências* (na forma de
        dois ou três pontos).


        bq. @(1..3)@ é um range, representando os números de um até três.


        bq. @('a'..'z')@ é um range, representando o alfabeto em minúsculas.


        Pense neles como um acordeão que fora fechado para se carregar.  (Você pode construir muito amor próprio 
        levando consigo um acordeão aberto... mas, as vezes uma pessoa tem q mergulhar em dúvidas e esconder 
        cuidadosamente a sanfona)  Os parênteses são os lados deste pequeno acordeão de mão.  
        Os pontos são a fole, mantendo as partes bem unidas.


        Normalmente, apenas dois pontos são usados. Se um terceiro ponto for usado, o último valor no range será
        excluído.


        bq. @(0...5)@ representa os números de zero até quatro.


        Quando você vê o terceiro ponto, imagine abrir o acordeão um pouco menos.  O necessário para uma nota
        apenas de seu fole.  A nota é este último valor.  Nós vamos deixar que o céu a coma.


        h3. Arrays (Conjuntos, Vetores)


        Um array é uma lista cercada por *chaves* e separada por *vírgulas*.


        bq. @[1, 2, 3]@ é um array de números.


        bq. @['casaco', 'luvas', 'snowboard']@ é um array de strings.


        Pense nele como uma centopéia que foi grampeada no nosso código.  As duas chaves
        são grampos que não deixam a centopéira se movimentar, então você consegue distinguir onde é cabeça e
        onde é a cauda.  As vírgulas são as pernas da centopéia, balançando entre cada seção do seu corpo.


        Era uma vez uma centopéia que tinha vírgulas ao invés de pernas.  O que significa que ela tinha que
        dar uma pausa literária a cada passo.  As outra centopéias a respeitavam muito por isso e ela veio a ter
        uma bela presença no comando.  Oh, e que filantropo!  Ela ficou famosa por
        dar folhas frescas aos menos afortunados.


        Sim, um array é uma coleção de coisas, mas ele também mantém estas coisas em uma ordem específica.



        h3. Hashes (Bolos, Misturas)


        Um hash é um dicionário cercado por *colchetes*.  Dicionários servem para encontrar definições
        das palavras.  O Ruby faz isso com *setas* feitas de sinais de igual, seguida por um sinal de
        maior que.


        bq. @{'a' => 'aardvark', 'b' => 'texugo'}@ são um exemplo.


        Desta vez, os colchetes representam livrinhos.  Veja como eles se parecem com
        pequenos, livros abertos com dobras no meio?  Eles represntam abrir e fechar
        nosso dicionário. 


        Imagine que nosso dicionário tem um definição em cada página.  As vírgulas representam
        os cantos de cada página, que nós viramos para ver a próxima definição.  E em cada página:
        uma palavra seguida por uma seta apontando a definição.


        <pre>
         {
           'nome' => 'Peter',
           'profissao' => 'domador de leões',
           'grande apreco' => 'flanela'
         }
        </pre>


        Não estou compararando hashes a dicionários por que você pode guardar só definições
        na hash.  No exemplo acima, eu guardei informação pessoal de Peter, o domador
        de leões com grande apreço por flanela.  Hashes são como dicionários porque elas são
        muito fáceis de se procurar algo.


        Diferentemente dos arrays, os itens na hash não são mantidos em ordem específica.


        !i/the.foxes-5.png(Os raposos pensam que o silêncio matará a tirinha.)!



        h3. Expressões Regulares


        Uma expressão regular (ou _regexp_) é uma série de caracteres cercados por *barras*.


        bq. @/ruby/@, @/[0-9]+/@ e @/^\d{3}-\d{3}-\d{4}/@ são exemplos.


        Expressões regulares são usadas para se achar palavras ou padrões
        no texto.  As barras dos lados da expressão são alfinetes.  


        Imagine se você tivesse uma palavrinha com alfinetes de cada lado e você
        a segurasse por cima de um livro. Você passa a palavra pelo livro e quando ela chega
        perto de uma palavra que coincida, ela começa a piscar.  Você espeta a expressão regular no livro,
        bem em cima da palavra que bate e ela brilha com as letras da palavra encontrada.


        Oh, e quando você espeta os alfinetes no livro, o papel espirra, _reg-exp!_


        Expressões regulares são muito mais rápidas que folhear um livro. O Ruby
        pode usar uma expressão regular pra procurar volumes de livros muito rapidamente.


        h3. Operadores


        Você usará a seguinte lista de operadores pra matemática ou para comparar coisas no Ruby.
        Analise a lista, reconheça alguns.  Você conhece, adição @+@ e subtração @-@
        e por aí vai.


        <pre class="text">
          ** !  ~  *  /  %  +  -  &  
          << >> |  ^  >  >= <  <= <=>
          || != =~ !~ && += -= == ===
          .. ... not and or          
        </pre>


        h3. Keywords (Palavras-chave, Palavras-reservadas)


        O Ruby tem um número de palavra embutidas, imbuídas em significado.  Estas palavras não podem
        ser usadas como variáveis ou modificadas às suas necessidades.  Algumas delas nós já
        discutimos.  Elas estão na caixa forte, meu amigo.  É só relar nelas and você terá 
        um erro oficial de sintaxe.


        <pre class="text">
          alias   and     BEGIN   begin   break   case    class   def     defined 
          do      else    elsif   END     end     ensure  false   for     if 
          in      module  next    nil     not     or      redo    rescue  retry 
          return  self    super   then    true    undef   unless  until   when 
          while   yield 
        </pre>


        Muito bom.  Estes são os ilustres membros da linguagem Ruby.  Teremos um belo
        banquete nós proximos três capítulos, grudando estas partes em manhosos pedaços
        de (comovente) código.


        E recomendo que você dê mais um olhadela pelas partes da conversa.  Dê uma ampla olhada 
        nelas.  Eu estarei testando seu metal na próxima seção.


        !i/the.foxes-6.png(Saindo para a picape.)!


#        h3. Você e seu dicionário 
#
#        Você está em um parque público com seu dicionário, aproveitando uma agradável tarde no parque.
#        Uma leve brisa folheia suavemente as páginas do dicionário descuidado em seu colo.  Um pássaro bate vagarosamente sua cabeça contra uma árvore. Um mendigo cuidava de sua bicicleta de uma roda só. Tudo está bem.
#
#        Espere aí.  Seu cérebro questiona sobre essa palavra.  Mendigo.  Isso realmente significa 
#        "um moleque de rua vestido miseravelmente" o que você acha que isso significa?  Você procura no seu dicionário.
#
#        Agora, eis a questão.  Como você irá responder esta questão com seu dicionário?  Por onde
#        você irá começar?  Você vai passando página por página, procurando pela definição de "um moleque de rua vestido miseravelmente,"?
#          Ou você irá usar as guias do dicionário e pular diretamente para a seção M, reduzindo o número de páginas em direção à palavra "Mendigo", a plavra em sí?
#
    