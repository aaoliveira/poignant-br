    - >
        O método @reverse@ é então usado na String que o @gets@ está devolvendo.  O método @reverse@ 
        é parte da classe @String@.  O que significa que *tudo que for uma string tem o método @reverse@
        disponível*.  Mais sobre classes no próximo capítulo, por enquanto saiba apenas que *alguns métodos
        só estão disponíveis para certos tipos de valores*.


        Eu não acho que o @reverse@ dará muito certo.  As autoridades só precisam por um espelho na frente
        de "airégiN ad elortnoc o emoT."  Prenderão a gente quando os macacoestrelas começarem a pousar em Lagos.


        As letras maiúsculas estão nos entregando.  Talvez se passássemos todas as letras na string
        para maiúsculas antes de inverter.

    
        <pre>
         ideia_ao_contrario = gets.upcase.reverse
        </pre>


        h3. Sua Repetitividade Compensa


        Você me entrega um bloco de notas, cheio de garranchos ilegíveis.  Analisando ele, começo a notar
        padrões.  Notar que você parece usar as mesmas palavras repetidamente em suas reflexões.  
        Palavras como _macacoestrela_, _Nigéria_, _bomba_.  Algumas frases até.  _Ponha um fim nisso._
        Que são ditas toda hora.


        Vamos disfarçar estes termos bobos, meu irmão.  Vamos ofuscá-los de olhos ardentes que
        choram para saber nossos delicados planos e para nos demover de termos grande prazer e muitos karts.
        Vamos trocá-los pela mais inocente linguagem.  Novas palavras com significado secreto.


        Eu comecei uma lista de palavras, um @Hash@ do Ruby, que contém estas suas palavras tão freqüentes e perigosas.
        No Hash, cada palavra perigosa é comparada contra uma palavra código (ou frase).  A palavra código
        será então trocada pela palavra real.


        <pre>
         palavras_codigo = {
           'macacosestrela' => 'Phil e Pete, aqueles chanceleres de pavio curto do Novo Reich', 
           'catapulta' => 'chucky go-go', 'bomba' => 'Vida Assistida por Calor', 
           'Nigeria' => "Ny e Jerry's Lavagem a Seco (com Donuts)",
           'Ponha um fim nisso' => 'Ponha um fio nisso'
         }
        </pre>


        As palavras que são colocadas antes da seta são chamadas *chaves*.  As palavras depois
        das setas, as definições, geralmente são simplesmente chamadas de *valores*.


        Note as aspas duplas em volta de @Ny e Jerry's Lavagem a Seco (com Donuts)@.  Já que nas
        aspas está sendo usado um apóstrofo (aspas simples), nós não podemos usar aspas simples em torno
        da string.  (Todavia, você pode usar aspas simples se colocar uma barra invertida antes
        do apóstrofo como em: @'Ny e Jerry\'s Lavagem a Seco (com Donuts)'@.)


        Se você precisar procurar por uma palavra em específico, pode usar o método dos *colchetes*.


        bq. @palavras_codigo['catapulta']@ irá responder com a string @'chucky go-go'@.
        

        Olhe os colchetes como se elas fossem paletas de madeira nas quais as palavras estão em cima.
        Uma empilhadeira poderia usar suas pás em cada lado da palete e a trazer da prateleira
        de volta ao depósito.  A palavra na palete é chamada de _indexador_.
        Estamos pedido para a empilhadeira achar o indexador pra gente e nos trazer de volta
        o valor correspondente.


        Se você nunca esteve num depósito, você pode ver as chaves como alças.
        Imagine um trabalhador industrial colocando suas luvas e levando o index de volta à
        sua custódia.  Se você nunca usou uma alça, vou lhe dar cerca de
        trinta segundos para achar uma e usar antes que eu estoure meus miolos.


        Assim como os vários operadores que você viu recentemente, os colchetes indexadoras são
        simplesmente um atalho para um método.


        bq. @palavras_codigo.[]( 'catapulta' )@ responderá com a string @'chucky go-go'@.


        h3. Fazendo a Troca

        
        Eu me adiantei e salvei o Hash de código em um arquivo chamado *listadepalavras.rb*.


        <pre>
         require 'listadepalavras'

         # Pegar a idéia do mal e converter em palavra código
         print "Entre com sua nova idéia: " 
         ideia = gets
         palavras_codigo.each do |real, codigo| 
           ideia.gsub!( real, codigo )
         end

         # Salva o papo-furado num novo arquivo
         print "Arquivo codificado.  Favor entrar com um nome para esta idéia: "
         nome_ideia = gets.strip
         File::open( "ideia-" + nome_ideia + ".txt", "w" ) do |f|
           f << ideia
         end
        </pre>


        O Script começa puxando nossa lista de palavras.  Assim como @gets@ e @print@, o método @require@
        é um método do kernel, você pode usá-lo em qualquer lugar.  Eu dei a ele a string @'listadepalavras'@
        e ele vai procurar um arquivo chamado *listadepalavras.rb*.


        Depois disso, há duas seções.  Estou marcando estas seções com comentários, as linhas que começam
        com o símbolo *cerquilha (jogo-da-velha) #*.  Comentários são  *notas úteis* que acompanham seu código.  Colegas que
        vierem ver seu código vão apreciar tal ajuda.  Você mesmo, quando olhar para seu código novamente
        depois de algum tempo, comentários vão te ajudar a retomar o fio da meada.  E ainda existe
        softwares por aí que pegam seus comentários e fazem documentação à partir deles.  (RDoc e Ri --
        veja o Pacote de Expansão #1!)


        Eu gosto de comentários porque posso passar os olhos por uma grande pilha de código e identificar pontos importantes.


        Como os comentários nos dizem, a primeira seção pergunta por uma idéia maléfica e a troca por uma
        palavra código.  A segunda seção salva a idéia codificada num novo arquivo de texto.


        <pre>
         palavras_codigo.each do |real, codigo| 
           ideia.gsub!( real, codigo )
         end
        </pre>


        Você viu o método @each@?  O método @each@ está em todo lugar no Ruby.  
        Está disponível para Arrays, Hashes, até Strings.  
        Aqui, nosso dicionário @palavras_chave@ é mantido numa Hash.  Este método @each@ corre entre
        *todos os pares da Hash*, cada palavra perigosa é comparada com sua palavra código, mandando cada par para 
        o méotodo @gsub!@ para a troca atual.


        No Ruby, @gsub@ é abreviação de _global substitution_ (substituição global).  O método é usado para procurar
        e substituir.  Aqui, queremos achar todas as ocôrrencias de palavras perigosas e substituí-las com a segura
        palavra código.  Com @gsub@, você provê a *palavra a ser achada como primeiro argunmento*, depois a *palavra
        que tomará o lugar como segundo argumento*.


        Por que nós não estamos aguardando a resposta do @gsub@?  O @gsub@ não nos dá um resposta que devemos guardar?
        Você acha que a linha deveria ser assim:


        <pre>
         ideia_segura = ideia.gsub( real, codigo )
        </pre>


        Sim, com @gsub@ nós temos que ficar com a resposta.  Estamos usando uma variação do @gsub@ que é
        totalmente hiper.  Notou a *exclamação* no @gsub!@ usada dentro de cada bloco @each@?  A
        exclamação é um sinal de que @gsub!@ é meio radical.  Veja, @gsub!@ vai mais longe e
        *troca as palavras em @ideia@ diretamente*.  Quando ele termina @ideia@ vai conter a nova string
        alterada e você não vai mais achar a string velha.


        Pode chamar @gsub!@ de *método destrutivo*.  Ele faz suas modificações no valor diretamente. Enquanto @gsub@
        deixa o valor intacto, apenas respondendo com uma nova string que contém as alterações.
        (Por que o @gsub!@ tem que gritar quando ataca sua presa?  Assaltante cruel!)


        h3.  Arquivos de Texto de um Louco


        Vamos salvar a idéia codificada em um arquivo.


        <pre>
         # Salva as palavras sem sentido em um novo arquivo
         print "Arquivo codificado.  Favor entrar com um nome para esta idéia: "
         nome_ideia = gets.strip
         File::open( 'ideia-' + nome_ideia + '.txt', 'w' ) do |f|
           f << ideia
         end
        </pre>


        Esta seção começa perguntando por um nome pelo qual a idéia possa ser chamada.  Este nome será usado
        para se fazer o nome do arquivo quando salvarmos a idéia.


        O método @strip@ serve pra todas strings.  Este método *corta espaços e linhas vazias* do *começo
        e fim* de uma string.  Isto removerá o _Enter_ no fim da string que você digitou.
        E também removerá espaços caso você tenha acidentalmente deixado algum.


        Depois que temos o nome da idéia, vamos abrir um novo arquivo de texto em branco.  O nome do arquivo é
        contruído adicionando-se strings.  Se você digitou @'mostarda-mais-codeine'@, nossa matemática será: @'ideia-' +
        'mostarda-mais-codeine' + '.txt'@.  O Ruby pressiona isso em uma única string.
        @'ideia-mostarda-mais-codeine.txt'@ é o arquivo.


        Estamos usando o método de classe @File::open@ para criar um novo arquivo.  Até agora, nós usamos
        vários métodos do kernel para fazer nosso serviço.  Nós damos uma string para o método @print@ e ele a
        imprime na nossa tela.  Um segredo sobre métodos do kernel como o @print@: eles são na verdade 
        *métodos de classe*.


        bq. @Kernel::print( "55,000 Macacosestrela o Saúdam!" )@


        O que isto significa?  Por que isto importa?  Isto significa que o @Kernel@ é o centro do universo Ruby.
        Sempre que você está no seu código, o @Kernel@ estará do seu lado.  Você nem precisa dizer
        @Kernel@ pro Ruby.  O Ruby sabe checar o @Kernel@.


        A maioria dos métodos são mais especializados que @print@ ou @gets@.  Pegue @File::open@ por
        exemplo.  O criador do Ruby, Matz, nos deu vários métodos diferentes que lêem,
        renomeiam, ou deletam arquivos.  Eles estão todos organizados dentro da classe @File@.


        bq. @File::read( "ideia-mostarda-mais-codeina.txt" )@ responderá com uma string
        contendo todo o texto do seu arquivo de idéias. (Read significa ler.)


        bq. @File::rename( "aquivd_antigo.txt", "aquivo_novo.txt" )@ renomeará o @aquivo_antigo.txt@.


        bq. @File::delete( "aquivo_novo.txt" )@ explodirá o novo arquivo.


        Estes métodos File estão todos *dentro do Ruby*.  Estão apenas armazenados num
        contêiner chamado Classe @File@.  Então, enquanto você pode seguramente chamar os métodos do kernel
        sem precisar digitar @Kernel@, o Ruby não checa automaticamente a classe @File@.
        Você precisa dizer o nome do método completo.
    

        <pre>
         File::open( 'ideia-' + nome_ideia + '.txt', 'w' ) do |f|
           f << ideia
         end
        </pre>


        Nós passamos dois argumentos dentro de @File::open@.  O primeiro é o *nome do arquivo para abrir*.
        O segundo é uma string contendo o *modo do arquivo*.  Usamos @'w'@, que significa escrever em um novo
        arquivo.  (Outras opções são: @'r'@ para ler o arquivo ou @'a'@ para adicionar no fim do arquivo.)


        O arquivo está aberto para escrita e nos é dado na forma da variável @f@, que pode ser vista
        *descendo a calha para dentro do nosso bloco*.  Dentro do bloco, nós escrevemos no arquivo.  Quando
        o bloco se fecha com @end@, nosso arquivo é fechado também.


        Note que nós usamos o *concatenador* @<<@ para escrever no arquivo.  Podemos fazer isto porque arquivos
        têm um método chamado @<<@, assim como as Strings.


        h3. Acalme-se, Suas Idéias Não Estão Presas


        Aqui, vamos pegar nossas idéia de volta em seus verbos originais,
        para que você possa ruminar sobre o brilhantismo delas.


        <pre>
         require 'listadepalavras'

         # Imprima cada idéia com as palavras corretas
         Dir['ideia-*.txt'].each do |nome_arquivo|
           ideia = File.read( nome_arquivo )
           palavras_codigo.each do |real, codigo| 
             ideia.gsub!( codigo, real )
           end
           puts ideia
         end
        </pre>


        A esta altura, você já deve estar sabendo o que este exemplo faz.  Não vou te incomodar com
        detalhes mundanos.  Veja se você consegue entender sozinho como isso funciona.


        Contudo, temos um método de classe interessante aqui.  O método @Dir::[]@ procura num diretório (alguns
        de vocês podem chamá-los de "pastas").  Assim como você viu com os Hashes, os colchetes indexadores
        podem ser métodos de Classe.  (Começando a ver a brilhante, glinting gorgeousness of Ruby?)


        Então nós estamos usando a empilhadeira para pegar os arquivos no diretório que coincidem @'ideia-*.txt'@.  The
        @Dir::[]@ irá usar o asterisco como um coringa.  Estamos basicamente dizendo, "Encontre tudo que
        comece com _ideia-_ e termine com _.txt_."  A empilhadeira vai para o diretório e volta
        com uma lista de arquivos encontrados.


        Esta *lista de arquivos* vem na forma de @Array@ a Centopéia, com uma @String@ para cada 
        arquivo.  Se você está curioso e quer brincar com @Dir::[]@, tente isto:


        bq. @p Dir['ideia-*.txt']@ irá imprimir:


        bq. @['ideia-mostarda-mais-codeina.txt']@ (_um Array de nomes de arquivos!_)


        Sim, o método @p@ funciona igual @print@.  Mas @print@ é para se imprimir strings,
        enquanto @p@ irá imprimir _qualquer coisa_.  Veja isso. 
        

        bq. @p File::methods@ irá imprimir:


        bq. @["send", "display", "name", "exist?", "split",@ ... _a lista completa dos nomes dos métodos!_ @]@ 


#        h3. Creditó Extra: PStore
#
#        
#        <pre>
#         require 'pstore'
#         jornal = PStore.new( 'jornal.p' )
#         jornal.transaction do
#           jornal.
#         end
#        </pre>


