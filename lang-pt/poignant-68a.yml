

        Tanto @caracteristicas@ como @attr_reader@ são apenas métodos de classe. Quando @attr_reader@ é usado em @BilheteLoteria@,
        a metaprogramação inicia por trás dos bastidores e começa a estourar balões, criando
        métodos *leitores* para as variáveis de instância @@numeros_escolhidos@ e @@data_compra@ acima.


        O código para o método @caracteristicas@ é a metaprogramação que eu tenho feito referência.
        Comentários no código revelam os três estágios que o método passa quando adiciona
        as características.


        # A *lista de características é passada para @attr_accessor@*, que constrói código
        *leitor* e *escritor* para as variáveis de instância. Um para cada característica.

        # *Métodos de classe são adicionados* para cada característica. (O método @vida@ é adicionado
        para a característica @:vida@). 
        Esses métodos de classe são usados na definição da classe assim como você usaria @caracteristicas@ ou 
        @attr_acessor. Dessa maneira, você pode especificar a característica, de acordo com os 
        pontos dados de uma característica para uma determinada criatura.

        # *Adicione um método de inicialização* que cria um novo monstro 
        corretamente, com os pontos certos e _GANHANDO FORÇA! GANHANDO FORÇA!_ o monstro está vivo!


        A beleza desses três passos é que você ensinou ao Ruby como criar monstros
        para você. Então quando o Ruby obtém as @características@:


        <pre>
         class Criatura
           caracteristicas :vida, :forca, :carisma, :arma
         end
        </pre>
        

        O Ruby preenche com o código dos bastidores e transplanta um pulsante
        coração verde e da ignição no corpo dando corda.
        O Ruby vai usar a metaprogramação da classe @Criatura@ e irá construir
        todos os variados métodos, expandindo @caracteristicas@ em uma lista como essa:


        <pre>
         class Criatura

           # 1. define métodos leitores e escritores
           attr_accessor :vida, :forca, :carisma, :arma

           # 2. adiciona novos métodos de classe para usar na criatura
           def self.vida( val )
             @caracteristicas ||= {}
             @caracteristicas['vida'] = val
           end

           def self.forca( val )
             @caracteristicas ||= {}
             @caracteristicas['forca'] = val
           end

           def self.carisma( val )
             @caracteristicas ||= {}
             @caracteristicas['carisma'] = val
           end

           def self.arma( val )
             @caracteristicas ||= {}
             @caracteristicas['arma'] = val
           end

           # 3. estabelece pontos padrões para
           #    cada característica
           def initialize
             self.class.caracteristicas.each do |k,v|
               instance_variable_set("@#{k}", v)
             end
           end

         end
        </pre>


        Agora, o Ruby vai aceitar gradativamente
        essas seis linhas de código da classe @Dragao@, curto o bastante para
        aparecer legal em cartas de jogos:


        <pre>
         class Dragao < Criatura
           vida 1340    # escamas duras
           forca 451    # veias ressaltadas
           carisma 1020 # sorridente
           arma 939     # cospe fogo
         end
        </pre>


        h3. Eval, o Menor Metaprogramador


        Embora o código de metaprogramação acima seja simplesmente Ruby, ainda assim pode ser difícil de seguir.
        Eu compreendo totalmente, caso você tenha chegado a esse ponto e seus olhos estejam girando
        em suas cavidades e seus joelhos emperrados. A parte mais complicada de tudo isso acima são
        as linhas que chamam os métodos @instance_eval@ e @class_eval@. Passe pomada nas suas juntas
        enquanto eu falo sobre @eval@.


        Viemos falando sobre *metaprogramação*. Escrevendo código que escreve códigos. O método
        @eval@ reside neste beco.
        O vagabundo @eval@ pega o código que você havia guardado em uma string e executa o código.


        <pre>
         drgn = Dragao.new
         # é identifo a...
         drgn = eval( "Dragao.new" )
         # ou alternativamente...
         eval( "drgn = Dragao.new" )
        </pre>


        Aqui, vamos escrever um programa que tem um buraco. Ao invés de escrever um programa
        que cria um novo @Dragao@, vamos deixar um buraco onde seria o @Dragao@.


        <pre>
         print "Que classe de monstro você veio combater? "
         classe_monstro = gets
         eval( "monstro = " + classe_monstro + ".new" )
         p monstro
        </pre>

