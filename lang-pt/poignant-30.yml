    - >
        h3. True (Verdadeiro)


        bq. @sujeito_aproximando = true@


        Eu vi o @true@ no buffet do hotel hoje.  Eu não suporto aquele cara.
        Ele aparece demais.  E você nunca encontrou alguém que plantou os pés
        com tanta força no solo.  Ele usa esse colar brega feito de
        conchas.  Sua face exibe uma confiança insolente.  (Você pode dizer
        que ele está exercendo toda sua repressão só para evitar de explodir
        num vôo do Neo.)


        Para ser honesto, não consigo ficar do lado de alguém que sempre tem de estar certo.
        Esse @true@ está sempre dizendo, "A-OK."  Chacoalhando as duas mãos.  E é sério, 
        ele ama aquele colar.  Ele o usa constantemente.


        Como suspeitava, ele está por trás dos bastidores para toda a agenda de eventos do @if@.


        bq. @print "Hugo Boss" if true@ se comporta como @print "Hugo Boss"@.


        Ocasionalmente, o @if@ vai puxar as cordas vermelhas pra exercer algum controle de massas.  
        O *par de iguais* dá a aparência de uma passagem, como cordas dos lados
        de um carpete vermelho onde só é permitida a passagem de @true@.


        <pre>
         if sujeito_aproximando == true
           print "Esse colar é clássico."
         end
        </pre>


        O par de iguais é simplesmente *uma checagem de identidade*.  Os cavalheiros das pontas opostas desta corda
        parecem ser iguais?


        Desse jeito, você controla quem o @if@ deixa entrar.  Se você não suporta o @true@ assim como eu,
        receba de peito aberto o @false@ (falso).


        <pre>
         if sujeito_aproximando == false
           print "Chega mais, seu diabo conivente."
         end
        </pre>


        Mesma coisa pra @unless@.  O portão é seu.  Tome o controle dele.


        h3. Novamente, Eu Quero Que Você Domine


        Agora, está afim de uma viagem mental?  *O sinal de dois iguais é um método.*  Você consegue adivinhar
        como ele funciona?  Aqui, dê uma olhada nele com ponto e parênteses:


        bq. @sujeito_aproximando.==( true )@


        Ruby permite o atalho, sem problemas.  Abandone o ponto e recue, vagarosamente.


        Agora, você se lembra o que deve fazer para *dominar* no Ruby?  _Use as respostas que
        os métodos lhe dão._


        <pre>
         if nil.==( true )
           print "Isto nunca vai acontecer."
         end
        </pre>


        No exemplo acima, como a resposta do método esta sendo usada?


        Pegue a afirmação @nil == true@.  Isso falhará o tempo todo.  Não são iguais.  
        Quando não há igualdade, o método do duplo igual responde com @false@.  Uma balançada de cabeça.
        Esta resposta é dada ao @if@, que não pode aceitar um @false@.  O @print@ nunca acontecerá.


        <pre>
         no_hotel = true
         email = if no_hotel
                   "why@hotelambrose.com"
                 else
                   "why@drnhowardcham.com"
                 end
        </pre>


        Mesmo que @if@ não seja um método, o @if@ retorna uma resposta.  Observe o exemplo acima
        e imagine o que acontece quando @no_hotel@ é @true@.


        O @if@ retornará a resposta dada pelo código que ele decidir rodar.  No caso de 
        @no_hotel@ ser true, a primeira string, meu endereço de e-mail no Hotel Ambrose, será
        retornada.  A palavra reservada @else@ marca o código a ser rodado, uma vez que o @if@ falhe.  Se @no_hotel@
        é false, o @if@ responderá com meu endereço de e-mail do escritório do Dr. N. Howard Cham, 
        onde eu recebo meu aprendizado.


        Você deve ter várias linhas de código dentro de um @if@ ou @unless@, *mas somente a resposta oriunda
        da última afirmacão completa será usada*.


        <pre>
         email = if no_hotel
                   endereco = "why"
                   endereco << "@hotelambrose"
                   endereco << ".com"
                 end
        </pre>


        Três linhas de código dentro do @if@.  A primeira linha atribui uma string contendo meu nome a uma variável.
        A segunda e terceira linha adicionam o resto do meu endereço de e-mail no fim.  O *menor que duplo @<<@
        é o operador da concatenação*.  Concatenar é o mesmo que *apender*, ou *adicionar ao fim*.


        Assim como vimos com o checador de igualdade @==@, o concatenador é um método.  Após acrescentar ao fim
        da string, o concatenador ainda *responde com aquela mesma string*.  Então, a terceira linha, que pode ser
        lida como @endereco.<<( ".com" )@, retorna @endereco@, que o @if@ então devolve pra a atribuição @email@.


        Uma pergunta: E se o @if@ falhar?  E se @no_hotel@ for falso no exemplo acima?
        Alguma coisa será retornada?  Nada é atribuído a @email@, certo?


        Sim, nada é retornado.  Que significa que: @nil@ é retornado.  E, muitas vezes, @nil@ é uma
        resposta bastante útil.

        
        <pre>
         print( if no_hotel.nil?
                  "Sem pistas se ele está no hotel."
                elsif no_hotel == true
                  "Definitivamente sim."
                elsif no_hotel == false
                  "Ele saiu."
                else
                  "O sistema está traaaaavad-iz"
                end )
        </pre>


        Você pode usar o método @nil?@ em qualquer valor no Ruby.  Novamente, pense nele como uma mensagem.
        Para o valor: "Você é nil?  Você está vazio?"


        Se @no_hotel@ estiver vazia, o Ruby não tem idéia se eu estou no hotel ou não.  Então o @if@
        responde com a string "Sem pistas".  Para tratar as possibilidades de @true@ ou @false@,
        a palavra reservada @elsif@ é usada.  Enquanto você pode ter apenas um @if@ e um @else@, você pode encher
        as entranhas com um exorbitante número de palavras chave @elsif@.  Cada @elsif@ age como *um outro teste @if@*.
        Checando por uma carga positiva.


        Se você está indo bem até este ponto, então está em boa forma para o restante do
        livro.  Você viu um código bem difícil nos últimos exemplos.  Forte companheiro.


