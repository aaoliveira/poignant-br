    - Esta é para os Desprivilegiados: >

        !i/elderly-1.gif(Algumas pessoas ainda não conseguem acreditar no que fizemos.)!


        Se você me der um número, seja ele um período da vida do Dr. Cham, lhe darei uma sinopse daquele
        período.  E eu farei isso com um método Ruby, isso será uma peça independente, um pedaço de código
        isolado que pode ser ligado à voz de um vulcão robótico, quando essas coisas forem o ápice
        das vozes talentosas não autoritárias.


        Ok, eu preciso que você preste atenção nos comandos @def@ , @case@ e @when@.  Você já viu Ranges (Períodos), os
        acordiões fechados @1895..1913@, no capítulo 3.  Eles contém as pontas e todos os números entre.  E as barras
        no fim de cada linha simplesmente ignoram o _Enter_, assegurando ao Ruby que _há mais linhas por vir_.
        


        Então, por favor: @def@, @case@ e @when@.


        <pre>
         def biografia_do_dr_cham( ano )
           case ano
           when 1894
             "Nasceu."
           when 1895..1913
             "Infância em Lousville, Winston Co., Mississippi."
           when 1914..1919
             "Trabalhou numa enfermaria de Pecãs; socou um protestante."
           when 1920..1928
             "Navegou na companhia do Rio Wisdomming, que se juntou \
              ao Rio Mississippi e se engajou em reflexão e auto-aprimoramento, \
              onde ele concluiu 140 horas de crédito para sua Remoniversidade"
           when 1929
             "Voltou à Louisville para escrever um romance sobre camponeses caçadores que viajam no tempo."
           when 1930..1933
             "Ergueu uma respeitável carreira medicando pecãs.  Financeiramente estável, ele \
              passou algum tempo no Brasil e Novo México, comprando raras árvores de pecã de casca fina.  Assim \
              que sua notoriedade chegou a um alto patamar: caramba, ele tentou se enterrar vivo."
           when 1934
             "Voltou a escrever seu romance.  Mudou de caçadores para funcionários de seguradora e \
              de camponeses para protestantes."
           when 1935..1940
             "Recebeu Arthur Cone, o chefe da Irmandade do Rio Wisdomming, em sua residência \
              como convidado. Juntos por cinco anos, planejaram e inventaram."
           when 1941
             "Aqui as coisas começam a ficar interessantes."
           end
         end
        </pre>


        O comando @def@.  Aqui esta nossa primeira *definição de método*.  Um método simples, que pode
        ser usado em qualquer lugar no Ruby.  E como rodamos ele?


        <pre>
         puts biografia_do_dr_cham( 1941 )
        </pre>


        Que por sua vez responde "Aqui as coisas começam a ficar interessantes."  É sempre a mesma história:
        _use suas respostas._  Eu fiz as coisas ali de tal modo que o @case@ sempre responderá com uma String.
        E já que o case é o último (e único) comando no método, então o método
        responderá aquela String.  Trickling water spilling down from ledge to ledge.


        Deixe me ser mais claro sobre a condição @case@.  Na verdade, eu deveria chamá-la de @case..when@,
        já que elas não pode ser usadas separadamente.  O comando @case@ é serguido de um valor, que é comparado contra
        cada valor que segue o comando @when@.  O primeiro valor a coincidir é usado pelo @case@,
        o resto é ignorado.  Você pode fazer a mesma coisa com um monte de @if..elsif@,
        mas isso é muito palavreado.
       

        <pre>
         case ano
         when 1894
           "Nasceu."
         when 1895..1913
           "Infância em Lousville, Winston Co., Mississippi."
         else
           "Sem informações sobre este ano."
         end
        </pre>


        É a mesma coisa que:


        <pre>
         if 1894 === ano
           "Nasceu."
         elsif 1895..1913 === ano
           "Infância em Lousville, Winston Co., Mississippi."
         else
           "Sem informações para este ano."
         end
        </pre>


        Os *três iguais (===)* são o comprimento da corda de veludo, checando valores como assim como dois iguais (==).  
        Resumindo: os três iguais são uma corda maior e ela folga um pouco no meio.  Não é tão tensionada, é um pouco mais
        maleável.


        Veja os períodos assim:  @(1895..1913)@ não é nem um pouco *igual* a @1905@.  Não, o período @(1895..1913)@ só é
        realmente *igual* a qualquer outro período @(1895..1913)@.  Os três iguais, no caso de um período,  dão uma folga
        e deixam o número inteiro @1905@ entrar, pois mesmo ele não sendo *igual* ao período, ele está *incluído* na lista
        de número inteiros representados pelo perído.  O que é suficiente em alguns casos, como o da biografia que
        eu fiz anteriormente.


        A qual realmente se parece com uma biografia, não?  Quero dizer, claro, o método @biografia_do_dr_cham@ é código, mas
        ele se parece com uma biografia, limpa e afável.


        !i/elderly-2.gif(O que a pesquisa revelou.)!


