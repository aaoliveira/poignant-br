

        |\3. *Classes de Caracteres* |

        | @\d@ | casa dígitos | também pode ser escrita como @[0-9]@ |

        | @\w@ | casa caracteres de palavra (letras, números e o travessão) | também pode ser escrita como  @[A-Za-z0-9_]@ |

        | @\s@ | casa espaços em branco (espaços, tabs, retorno de carro, pula linha) | a.k.a. @[\t\r\n]@ |

        | @\D@ | casa tudo _menos_ dígitos | um conjunto negado @[^\d]@ |
        
        | @\W@ | casa tudo _menos_ caracteres de palavra | assim como @[^\w]@ |
        
        | @\S@ | casa tudo _menos_ espaços em branco | também @[^\s]@ |

        | @.@ | o ponto casa *tudo*. |


        Construir uma expressão regular envolve encadear esses receptáculos para expressar sua busca. Se estiver procurando
        por um número seguido de espaço em branco: @/\d\s/@.  Se estiver procurando por três números em sequência: @/\d\d\d/@.  
        *As barras que abrem e fecham marcam o início e o fim da expressão regular.*


        Uma busca por três números em sequência também pode ser escrita como: @/\d{3}/@.  Imediatamente após uma classe de caracteres
        como @\d@, você pode usar um símbolo de quantidade para dizer quantas vezes quer que aquela classe de caracteres seja repetida.


        |\3. *Quantificadores* |

        | @{n}@ | casa exatamente _n_ vezes | Precisamente três números em sequência é @/\d{3}/@ |

        | @{n,}@ | casa _n_ vezes ou _mais_ | Três ou mais letras em sequência é @/[a-z]{3,}/i@ |

        | @{n,n2}@ | casa pelo menos _n_ vezes mas não mais que _n2_ vezes | Então, @/[\d,]{3,9}/@ casa
        entre três e nove caracteres que são números ou vírgulas |

        | @*@ | o asterisco @*@ é a forma curta para @{0,}@ | Para casar dois pontos, seguidos de zero ou mais caracteres de palavra: @/:\w*/@ |

        | @+@ | o sinal de mais é a forma curta para @{1,}@ | Para casar um ou mais sinais de menos ou mais, use @/[-+]+/@ |

        | @?@ | a interrogação é a forma curta para @{0,1}@ | Para casar três números seguidos de um ponto opcional: @/\d{3}[.]?/@ |


        Uma expressão regular bem comum é uma que case números de telefone.  Números de telefone norte-americanos (incluindo
        código de área) podem ser casados usando a classe de caractere de dígito e os quantificadores precisos.


        <pre>
         irb> "Ligue 909-375-4434" =~ /\d{3}-\d{3}-\d{4}/
           => 6
         irb> "O número é (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 11
        </pre>


        Desta vez, em vez de usar @match@ para procurar pela expressão, usou-se o operador @=~@.  Este operador é o
        *operador de casamento*, um sinal de igual seguido de *um til*.  O til é como uma fumacinha saindo da ponta de uma
        chaminé.  Lembre-se dos cervos, a fumaça que eles soltam, uma linguagem críptica assim como as expressões regulares.  O
        til fumacento aponta para a expressão regular.


        O operador de casamento retorna um número.  O número é a posição na string onde a expressão regular foi encontrada.
        Então quando o operador retorna @6@, ele está dizendo, "Antes da expressão, há seis caracteres na string."


        Se você precisa casar a string inteira, você pode usar a variável global especial @$&@ se você está usando o 
        operador de casamento.  Ou, se estiver usando o método @match@, você pode conseguir a string inteira convertendo
        o objeto @MatchData@ em uma string.


        <pre>
         # Usando =~ e $& juntos.
         irb> "O número é (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 11
         irb> $&
           => "(909) 375-4434"

         # Usando o objeto MatchData.
         irb> telefone = /[(]\d{3}[)]\s*\d{3}-\d{4}/.match("O número é (909) 375-4434")     
           => #<MatchData:0xb7d51680>
         irb> telefone.to_s
           => "(909) 375-4434"
        </pre>


        A maioria dos Rubistas prefere a segunda alternativa, uma vez que usa um objeto dentro de uma _variável local_ em vez de uma _variável global_.
        Variáveis globais são meio questionáveis, uma vez que podem ser facilmente sobrescritas.  Se você rodar duas expressões regulares na
        sequência, a variável global será sobrescrita na segunda vez.  Mas com variáveis locais você pode manter as duas ocorrências
        desde que as variáveis tenham nomes diferentes.


        Além de encontrar ocorrências, outro uso comum de expressões regulares é fazer *encontre-e-substitua* de dentro do Ruby.
        Você pode buscar pela palavra "mala" e substituí-la pela palavra "banjo."  Claro, você pode fazer isso com strings ou expressões regulares.


        <pre>
         irb> musica = "Eu furtei sua mala / E roubei o malabarista"
         irb> musica.gsub 'mala', 'viola'
           => "Eu furtei sua viola / E roubei o violabarista"

         irb> musica.gsub /\bmala\b/, 'viola'
           => "Eu furtei sua viola / E roubei o malabarista"
        </pre>


        O método @gsub@ significa "substituição global."  Note como no primeiro exemplo ele substituiu a palavra "mala" e as quatro
        primeiras letras de "malabarista."  Strings também têm um método simples @sub@ que vai substituir apenas uma vez.


        E assim este capítulo acaba, com Blix e os Raposos voando no sólido rosa expelido por um cervo muito reservado em algum lugar
        naquelas pastagens.


#        Usar expressões regulares para substituição é incrivelmente astuto
#
#
#        |\3. *Marcas de Posicionamento* |
#
#        | @^@ | casa o início de uma linha | Testa uma string começada por um jogo-da-velha: @/^#/@ |
#
#        | @$@ | casa o fim de uma linha | Procura por linhas vazias: @/^\s*$/@ |
#
#        | @\b@ | casa as bordas de uma palavra, início ou término | Encontra palavras que comecem com uma vogal: @/\b[aeiou]/@ |
#
#        | @\A@ | casa com o início de uma string | Checa para ver se a string começa com uma saudação: @/AOla/@ |
#
#        | @\z@ | casa com o final de uma string | Garante que uma string tem apenas caracteres de uma palavra: @/\A\w\z/@ |
#
#
#        h3. Rastreando por compatibilidades
#
#
#        <pre>
#         def carrega_dicionario( nomedoarquivo )
#           hsh = {}
#           File.read( nomedoarquivo ).scan( /(.+): (.+)/ ) do |k, v|
#             hsh[k] = v
#           end
#         end
#        </pre>
#
#
#        Se posso lhe oferecer um pequeno conselho em relação a expressões regulares, é este: seja você mesmo.  Não fique
#        muito preso a expressões regulares que fizeram vocês esquecer quem é.
#
#
