    - >
      h3. Completar com tab


      Uma característica do Irb raramente mencionada é a vantagem do recurso de auto-completar com a tecla TAB.
      Este tópico tem um pouco de tabu no momento, uma vez que trabalhar com ele no Windows é um tanto horroroso.
      (Não, não tenha medo. Agora, mais do que nunca, olhe à sua direita.)

      Se você estiver no Linux ou no FreeBSD, o recurso de auto-completar com a tecla TAB deverá funcionar imediatamente.
      E se estiver usando OS X, você deverá ter certeza que está atualizado para a última versão 1.8 e quando executar o Irb, use:

      <pre class="text">
       irb --readline -r irb/completion
      </pre> 


      Basicamente, quando você teclar _TAB_, o Irb tentará adivinhar o que você está tentando digitar.
      Tente digitar: @[].col@ e tecle _TAB_. o Irb finalizará isto. @[].collect@ e isto levará
      seu cursor até o final então você pode adicionar mais conteúdo.


      Se existem várias combinações, apenas teclar _TAB_ não adiantará. Mas pressione duas vezes
      e o Ruby lhe dará uma lista completa de possíveis combinações.


      Isto é ótimo se você quer apenas ver todos os métodos para um certo objeto. Digite em qualquer
      número, um ponto, e use _TAB_.


      <pre class="text">
        >> 42.
                      42.floor                   42.next                    42.step
        42.__id__     42.freeze                  42.nil?                    42.succ
        42.__send__   42.frozen?                 42.nonzero?                42.taint
        42.abs        42.hash                    42.object_id               42.tainted?
        42.between?   42.id                      42.prec                    42.times
        42.ceil       42.id2name                 42.prec_f                  42.to_f
        42.chr        42.inspect                 42.prec_i                  42.to_i
        42.class      42.instance_eval           42.private_methods         42.to_int
        42.clone      42.instance_of?            42.protected_methods       42.to_s
        42.coerce     42.instance_variable_get   42.public_methods          42.to_sym
        42.display    42.instance_variable_set   42.quo                     42.truncate
        42.div        42.instance_variables      42.remainder               42.type
        42.divmod     42.integer?                42.respond_to?             42.untaint
        42.downto     42.is_a?                   42.round                   42.upto
        42.dup        42.kind_of?                42.send                    42.zero?
        42.eql?       42.method                  42.singleton_method_added  
        42.equal?     42.methods                 42.singleton_methods       
        42.extend     42.modulo                  42.size  
      </pre>


      Agora, tentando teclar @Kernel::@ e depois _TAB_. Todos os métodos do core. Nunca esqueça disto
      e use o tempo todo.


      !i/tigers.vest-3.gif(Todos fugiram com exceção da robô e a arma de gelo continuou e continuou...)!


      Ok, uma última coisa então vou parar de incomodar com toda esta ótima tecnologia.
      Mas terei que falar isto alto, então tapem os ouvidos! Estou do outro lado do mundo, galera, mas o
      volume vem do céu -- um negrito, vermelho e crescente --


      h1={font-size:84pt; color:#FDD; line-height: 120%}. ((%{color:#A53}ri%))


      h3={color: #300}. (O próprio 102 do Ruby ou 555-1212 ou _Sim, Operadora, Coloque Belgrado na Linha_ -- Eu Estarei Bem Aqui -- Apenas Batendo na Tecla do "Jogo da Velha" Até  Que Alguém Atenda...


      E o Ri atende. "Aqui é o Ri. Classe e dois pontos, por favor"


      Você entra correndo, "Isto é a instância de um método, Operador. Enumerable#zip."

  
      <pre class="text">
       ri Enumerable#zip
      </pre>


      Sem demora, corrija na sua tela (tão rápido que até o gato sentado na
      quina estica o pescoço, boceja e alcança a sua caneca real _A coisa mais
      barulhenta desde Michael Dorn_):


      <pre class="text">
       --------------------------------------------------------- Enumerable#zip
            enum.zip(arg, ...)                   => array
            enum.zip(arg, ...) {|arr| block }    => nil
       ------------------------------------------------------------------------
            Converte qualquer argumento para arrays, então une elementos de _enum_
            com elementos correspondentes de cada argumento. Isto gera uma
            seqüência de +enum#size+ _n_-element arrays, onde _n_ é um a mais
            que a conta de argumentos. Se o tamanho de algum argumento é menor
            que +enum#size+, valores de +nil+ são providos. Se é dado um
            bloco, este é chamado para cada saída do array, caso contrário um
            array de arrays é retornado.

               a = [ 4, 5, 6 ]
               b = [ 7, 8, 9 ]

               (1..3).zip(a, b)      #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
               "cat\ndog".zip([1])   #=> [["cat\n", 1], ["dog", nil]]
               (1..3).zip            #=> [[1], [2], [3]]
      </pre>


      Isto é um dicionário íntegro de Ruby em inglês (aqui aparece traduzido apenas como exemplo) -- O poder de apenas perguntar está na ponta
      de seus dedos -- não diga que nunca ouviu sobre este nenhum-dinheiro-supre-uma-vida-inteira-de
      explicações-apropriadas!_


      Para ter uma explicação de qualquer classe em inglês, junto com diretório completo para
      todos seus métodos, todos com uma voz suave que serve para acalmar qualquer um de
      vocês cosmonautas em pânico aí lutando contra a atração de um raio trator de tolerância zero,
      apenas use no console: @ri Class@.


      Mas para ajudar nos métodos da classe, você tira da manga: @ri Class::method@.


      Apesar de métodos de instância usarem o cerquilha (jogo-da-velha) ao invés do ponto. (Uma vez que ponto pode significar classe *ou*
      métodos de instância.) Digo: @ri Class#method@.


      A completa distribuição das classes, uma lista completa desde o mais alto topo até o centro da Terra,
      pode ser alcançada com @ri -c@.


      e além do texto, você pode fazer HTML: @ri -Tf html String#gsub > gsub.html@.


      *Ou mostrar ANSI colorido: @ri -Tf ansi String#gsub@.*  E este é ultimo e o melhor.


      h3. Dentro do Painel de controle do Ri


      Atrás do Ri canta um coro de vozes humanas, primeiramente Dave Thomas, um dos autores de _Programming
      Ruby_, e absolutamente o pai adotivo americano do Ruby. Muitos destes discursos elaborados
      do Ri são diretamente das referências de _Programming Ruby_.  Não se esqueça de 
      agradecer ao Dave periodicamente.


      O Ri extrai seu exuberante conjunto de informações do mesmo código que o Ruby é construído. Em cada um dos
      arquivos de código contidos no armário de arquivos da chefia Ruby, comentários detalhados
      descrevem tudo claramente.


      Na classe @date@ de Ruby, aqui temos métodos bem comentados:      


      <pre>
       # Obtenha o tempo desta data como [horas, minutos, segundos,
       # fração de segundos]       
       def time() self.class.day_fraction_to_time(day_fraction) end
       
       # Obtenha a hora desta data.       
       def hour() time[0] end
         
       # Obtenha o minuto desta data.
       def min() time[1] end
      </pre>


      Os comentários surgem no Ri. Digitamos: @ri Date#time@.


      <pre class="text">
       -------------------------------------------------------------- Date#time
            time()
       ------------------------------------------------------------------------
            Get the time of this date as [hours, minutes, seconds,
            fraction_of_a_second]

      </pre>


      O Ri advinha muito de como um método funciona, embora espera-se que os codificadores
      escrevam uma breve descrição nos comentários, pouco antes da definição de um método ou classe.
      Eu sugeriria que sempre que for escrever um método, adicione uma breve descrição
      nos comentários antes daquele método. Em tempo, você pode gerar uma
      documentação Ri para aquele método.


      Você também pode usar alguns caracteres especiais para aumentar sua descrição. Por
      exemplo, se você identar um parágrafo e usar um asterisco @*@ ou um hífen @-@      
      pouco antes das letras da primeira frase, o parágrafo será reconhecido como um
      item de lista. Então, se a sua descrição precisa ser convertida para HTML, você
      verá o item de lista aparecer como uma lista de HTML não-ordenada.


      <pre>
       # Obtenha o tempo desta data como um array de:      
       # * horas
       # * minutos
       # * segundos
       # * fração de segundos
       def time() self.class.day_fraction_to_time(day_fraction) end
      </pre>


      Outra regras semelhantes: Listas que começam com dígitos seguidos de períodos
      são reconhecidas como listas numéricas. Palavras enfatizadas são cercadas por travessão (underscore),
      palavras em negrito por asteriscos, palavras em código por sinais de adição. Exemplos são simples blocos
      de texto identados por alguns espaços. Todas estas regras juntas são chamadas RDoc.


      Aqui está um pedaço do RDoc do método @initialize@ em um dos meus projetos
      chamado RedCloth. Observe o exemplo identado bem como a classe Ruby e
      nomes de métodos alinhados com sinais de soma.


      <pre>
       #
       # Retorna um novo objeto RedCloth, baseado em +String+ e
       # cumprindo todas as +restrições+ incluídas.       
       #
       #   r = RedCloth.new( "h1. A <b>bold</b> man", [:filter_html] )
       #   r.to_html
       #     #=>"<h1>A &lt;b&gt;bold&lt;/b&gt; man</h1>"
       #
       def initialize( string, restrictions = [] )
           @lite = false
           restrictions.each { |r| method( "#{ r }=" ).call( true ) }
           super( string )
       end
      </pre>


      Para a série completa de regras RDoc veja a seção *Markup (Marcação)* do
      "README":http://rdoc.sourceforge.net/doc/files/README.html.


      h3. Impulsionando seu próprio Ri


      O Ri porém não lê automaticamente seus arquivos para você. Você tem que guiá-lo,
      mostrar o caminho. Mude para o diretório do código que você gostaria de examinar. Então,
      use a ferramenta RDoc para executar.


      <pre class="text">
       cd ~/cvs/seu-codigo
       rdoc --ri-site
      </pre>


      Agora, tente usar @ri SuaClasse@ para assegurar que todas as suas descrições estão aparecendo
      apropriadamente.
      Se você quer fazer documentação HTML, tente isto:


      <pre class="text">
       cd ~/cvs/seu-codigo
       rdoc
      </pre>


      O diretório @~/cvs/seu-codigo@ deverá agora também possuir um diretório @doc@
      recente contendo documentação HTML para todas as suas classes. Veja @index.html@
      para as notícias agradáveis.


      Pois então. Está tudo em suas mãos agora. Bem vindo ao Ruby. 


      !i/tigers.vest-4.gif(O Tigre Encontra Uma Nova Casa e Eventualmente Aprende a Seguir Em Frente.)!


#
#       Assim como o sol se põe e eu tenho que chamá-lo Paij-plo, Eu checo o tempo.
#
#
#        bq. @puts Time.now@
#
#        Que imprime: @Sun Sep 12 18:34:50 EDT 2004@
#
#
#        Paij-plo se debruça no meu ombro, "E então está (re-eep) devorado."
#
#
#        Quando ele diz isto, minha espinha escapa das minhas costas. É uma religião
#        inteira (aterrorizado) e ela surge neste coloquialismo barato. Quando Paij-plo
#        começa sua solene _é hora de comer_ ou seu _ele está bem atrás de nós_ falatório.
#
#
#      Eu acho que havia um tempo em Endertromb quando todos viviam sem a morte.  Paij-plo
#      diz um "homem pantera" caiu em um enorme abismo, um túnel profundo ao redor do  
#      planeta. Seu corpo foi encontrado do outro lado do planeta. Mas ele não tinha ferimentos, seu
#      corpo estava quente. Ele estava morto por apenas um segundo.
#
#
#      Seu corpo ficou morto por um segundo. Continuou quente e nunca apodreceu.
#      
#      Eb-F-F-A.  Então, Bb-D-D-F.


#        Dr. Cham virou-se para a cabra. "Você sabe trabalhar com estes controles, não é? Eu preciso
#        arquivar um programa."
#
#
#        "
#        A cabra lançou suas pernas sobre o painel e com isto afrouxou algumas maçanetas suntuosas em uma série de posições 
#        até que um slot abriu na base, do qual derramou uma longa corrente de prata. No final da corrente
#        balançava um denso pegador do tamanho de um filé de peixe.

