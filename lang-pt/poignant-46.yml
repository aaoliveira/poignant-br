    - >
        Oh, e mais uma coisa sobre o @dup@.  Algumas coisas não podem ser "dupadas".  Números, por exemplo.  
        Símbolos (que se parecem com @:morte@) são idênticos quando grafados iguais.  Assim como números.


        Além disso, algumas variáveis especiais: @nil@, @true@, @false@.  Estas são coisas que o Ruby não vai
        te deixar alterar, então não faz sentido copiar mesmo.  Quero dizer, imagine se você pudesse mudar o 
        @false@ para que seja @true@.  A coisa toda vira uma grande mentira.


        Talvez o *Aspecto Confuso No. 3* seja simples.  Estou usando aquelas chaves na string. 
        Estou a tratando como se ela fosse um Array ou Hash.  Eu posso fazer isso.  Porque strings
        têm um método @[]@.


        Quando usadas em uma string, as chaves vão extrair parte daquela string.  Mais uma vez,
        espaço para as pás da empilhadeira. A string é como uma longa prateleira e a empilhadeira
        tira os pedaços da string.


        Dentro das chaves, nós passamos o _index (índice)_.  É a etiqueta que colocamos entre as pás,
        onde o trabalhador pode vê-las.  Quando o assunto são strings, podemos usar vários objetos como
        índices.
        

        <pre>
         str = "Uma string é uma longa prateleira de letras e espaços."
         puts str[0]       # imprime 85 (o código do caracter 'U')
         puts str[0..-1]   # imprime 'Uma string é uma longa prateleira de letras e espaços.'
         puts str[1..-2]   # imprime 'ma string é uma longa prateleira de letras e espaços'
         puts str[1, 3]    # imprime 'ma '
         puts str['prateleira'] # imprime 'shelf'
        </pre>


        Tudo bem, o último *Aspecto Confuso No. 4*: este método pode ser enviado a um loop interminável.
        Você pode dar uma string para este método, o que fará com que ele trave e nunca mais volte.
        Dê uma olhada no método.  Você consegue jogar um graveto que trave o loop?


        <pre>
         def limpar_murmurios_de( frase )
           unless frase.respond_to? :include?
             raise ArgumentError, 
              "não posso limpar os múrmurios de um(a) #{ frase.class }"
           end
           frase = frase.dup
           while frase.include? '('
             abre = frase.index( '(' )
             fecha = frase.index( ')', abre )
             frase[abre..fecha] = '' if fecha
           end
           frase
         end
        </pre>


        Aqui, entorte o graveto antes de jogá-lo.


        <pre>
         graveto = "Aqui está um ( graveto entortado."
         limpar_murmurios_de( graveto )
        </pre>


        Por que o método trava?  Bem, o loop @while@ espera até que todos os parênteses abertos se 
        acabem antes de parar de rodar.  E ele só modifica um parêntese aberto que tenha um par parêntese fechado.
        Então, se nenhum parêntese fechado é encontrado, o parêntese aberto não será modificado
        e o @while@ nunca ficará satisfeito.


        Como você reescreveria este método?  Eu sei como me virar no Ruby, então eu usaria uma expressão
        regular.


        <pre>
         def limpar_murmurios_de( frase )
           unless frase.respond_to? :gsub
             raise ArgumentError, 
               "não posso limpar os múrmurios de um(a) #{ frase.class }"
           end
           frase.gsub( /\([-\w]+\)/, '' )
         end
        </pre>


        Dê o melhor de si quando pensar nos seus loops.  É muito fácil, especialmente para os loops @while@ e @until@
        saírem do controle.  Melhor usar um iterador.  E nós chegaremos em expressões regulares na hora certa.


        Resumidamente, aqui está o que aprendemos sobre escrever métodos:


        # Não se surpreenda se as pessoas passarem objetos inesperados aos seus métodos.
        Se você não pode usar de jeito nenhum o que lhe deram, @raise (cause)@ um erro.

        # É falta de educação mudar objetos que são dados aos seus métodos.  Use @dup@ para
        fazer uma cópia.  Ou encontre um método como @gsub@ que automaticamente faz a cópia
        enquanto faz o seu serviço.

        # As chaves podem ser usadas para procurar partes dentro de qualquer objeto @Array@, @Hash@ ou @String@,
        já que estes objetos provêm um método @[]@.  E também, já que estes objetos provêm um método @[]=@,
        as chaves podem ser usadas para atribuição (do lado esquerdo do sinal de igual) para
        mudar partes destes objetos.

        # Cuidado com loops fujões.  Evite @while@ e @until@ se você puder.
 

        h3. Os Mecanismos do Estereótipo


        !>i/my.daughters.organ-2.gif(Vendedor de gatos do espaço.)!


        Imediatamente ouve-se um sussurro nas árvores atrás da casa do Paij-ree e acabou que era
        o homem que caíra do céu.  Seu nome era Doug e ele vendia gatos.


        Então, assim que ele aparecer, quando sua sombra (e as sombras dos gatos amarrados aos seus
        pés) entrou na frente do passáro no gramado que nós estávamos tentando acertar com uma raquete, 
        enquanto ele retirava o hélio do grande balão, nós gritamos, "Olá, Doug!"


        E ele diz, "Olá, Gonk-ree!  Olá, Why!"


        Paij-ree checa os bolsos para ter certeza que tem o real-e-vinte-sete que vai precisar para
        comprar os três gatos que precisa para manter a fornalha abastecida e a parabólica virando. Estes
        gatos geram montes de eletricidade estática quando Paij-ree os joga no gerador, onde eles estarão em
        inferioridade numérica a gigantes bastões de vidro, que os acariciam continuamente-- Mas, espere!  
        Você reparou como o corretor de gatos chamou ele de Gonk-ree?

        
        E ele o chama de Gonk-ree de dia e Gonk-plo de noite.


        Então o sufixo é definitivamente relacionado à luz do sol.  Até onde sei, o prefixo indica
        a relação de quem chama o Paij-ree.

        
        <pre>
         class String

           # As partes do nome do professor
           # de órgão da minha filha.
           @@silabas = [
             { 'Paij' => 'Pessoal',
               'Gonk' => 'Negócios',
               'Blon' => 'Escravo',
               'Stro' => 'Mestre',
               'Wert' => 'Pai',
               'Onnn' => 'Mãe' },
             { 'ree'  => 'AM',
               'plo'  => 'PM' }
           ]

           # Um método para determinar o 
           # signficado de certos nomes dele.
           def significado_do_nome
             partes = self.split( '-' )
             silabas = @@silabas.dup
             significado = partes.collect do |p|
               silabas.shift[p]
             end
             significado.join( ' ' )
           end

         end
        </pre>


        Agora eu fui bem mais além do que lhe mostrar apenas código banal.  Houve aqui uma grave libertinagem 
        e um crime contra a natureza.  Um crime que a maioria das linguagens não permitiriam que você cometesse.  
        Nós estamos mudando a @String@, *uma das classes do núcleo do Ruby*!


        "Eu sei que isto é um pouco perigoso," Eu disse, quando passei isso por baixo do nariz do Paij-ree.
        "Eu espero que ninguém se machuque."


        "Todo cara pálida deve experimentar o que esse (kep-yo-iko) perigo faz," ele disse.  "Cachorros e lenhas
        e areia movediça (kul-ip), todos devem ser experimentados."  E ele deu uma gole no seu drink de pântano Beagle Berry.


        Então o que é que eu estou adicionando à classe @String?@  Duas coisas: uma variável de classe e
        um método.  Um *método de instância* normal.


        Eu gosto de ver a *arroba* como um caracter que significa *atributo*.  A *arroba dupla*
        *atributo coletivo*.  Uma variável de classe.  Todas as instâncias da classe podem olhar
        pra esta váriavel e ela é a mesma pra todas.  A variável @@@silabas@ é um Array
        que agora pode ser usado dentro da classe String.


        O novo método é @significado_do_nome@ e esse novo método pode ser usado com qualquer string.


        bq. @print "Paij-ree".significado_do_nome@ imprime @Pessoal AM@.


        Como você pode ver, Paij-ree é um nome pessoal.  Um nome que os amigos usam nas manhãs.


        Tenha certeza de ter visto a linha de código que usa @self@.  Esta é uma variável especial, uma
        variável que representa o objeto cujo método você está chamando.  Para simplificar as coisas um
        pouco, vamos tentar fazer um método que separe uma string pelos hífens.


        <pre>
         class String
           def separar_hifen
             self.split( '-' )
           end
         end
        </pre>


        De novo, aqui está um método que pode ser usando com qualquer string.


        bq. @"Gonk-plo".separar_hifen@ retorna o Array @['Gonk', 'plo']@.


        Usar @self@ marca o a entrada em um novo estágio com idéias mais avançadas no Ruby.
        Esta é uma linguagem de definição.  Você está definindo um método, desenhando ele antes dele ser usado.  Você está
        preparando para a existência de um objeto que use aquele método.  Você está dizendo, "Quando @separar_hifen@ 
        for usado, haverá uma string a qual estaremos separando-hífens.  E @self@ é uma variável especial 
        que faz referência àquela string."


        Ruby é uma linguagem de definição imbatível.  Uma discussão suculenta e de rachar a cuca estará no seu caminho
        nas profundezas deste livro.


        Na maioria das vezes você não precisa usar @self@ explícitamente, já que você pode chamar métodos
        diretamente dentro de outra definição de método.


        <pre>
         class String
           def separar_hifen; split( '-' ); end
         end
        </pre>


        No método @significado_do_nome@, encontre o loop.  Aprender sobre @Array#collect@ é essencial.
        Vamos olhar de perto.


        <pre>
         significado = partes.collect do |p|
           silabas.shift[p]
         end
        </pre>


        O Array @partes@ contém o nome separado.  @['Paij', 'plo']@, por exemplo.  Estamos iterando por
        cada item naquele Array com @collect@.  Mas @collect@ vai um passo a frente em relação ao que o @each@ faz.  
        Assim como @each@, @collect@ joga cada item pela calha como uma variável de bloco.  E aí, ao término do 
        bloco, @collect@ *mantém a resposta que o bloco dá e a adiciona em um novo Array*.  O método 
        @collect@ é o jeito perfeito de se fazer um novo Array que é baseado em itens de um Array existente.


        O Doug tem três gatos à venda.  Um custa doze centavos, um sessenta e três centavos, um nove centavos.
        Vamos ver quanto cada gato custaria se nós adicionássemos uma gorjeta de 20%.


        <pre>
         gatosegorjetas = [0.12, 0.63, 0.09].collect { |custogato| custogato + ( custogato * 0.20 ) }
        </pre>


        Costumo dizer que a propriedade do Paij-ree é um charmoso pedaço de floresta quando não está chovendo gatos e Doug.
        Por vários dias, Paij-ree e eu acampamos em tendas perto do rio atrás da casa dele, subsistindo de
        fumaça de turdus e retalhando indiozinhos adormecidos ao pôr do sol.  Em uma ocasião ele perdeu no
        carteado e eu sabia que sua mente estava distraída, pensando em Endertromb.  Tudo isso deve estar
        remoendo nele por algum tempo já.  Eu fui o primeiro confidente que ele tivera.


        "Acabei de vir de Ambrose," Eu disse.  "É tipo minha segunda casa adotiva, um lugar onde elfos
        aspiram a ser animais perfeitos."


        Ele resmungou e balançou a cabeça.  "Você não pode ser (poth-in-oin) parte (in) em coisas assim."


        "Você acha que nós falharemos?"


        "Eu (preep) já vi isso antes," ele disse.  E daí, ele falou sobre a Loteria.


