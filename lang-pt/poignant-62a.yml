

        O código acima recupera a lista de caminhões achados por pre-eventualistas e exibe
        somente as linhas que contenham a palavra 'pickup'.
        Dessa maneira podemos limitar as descrições e procurar somente as linhas pertinentes.


        Acima, os *colchetes*  são usados em uma string, de forma que seja pesquisado nessa string o que
        quer que esteja dentro dos colchetes. Como a string @'pickup'@ está dentro dos colchetes, a palavra
        'pickup' é pesquisada na string @line@.


        !i/wixl-13.gif(Sobre ser legal.)!


        Quando uma página web é carregada com @read@, toda a página é carregada na memória. Normalmente
        isso ocupa somente alguns kbytes. Mas se a página é grande (vários megabytes), é melhor usar
        @each_line@, que carrega uma linha de cada vez, evitando ocupar toda memória.


        h3. Yielding é como blocos de montar 


        Ruby frequentemente usa iteradores dessa forma. Sim, iteradores são usados para percorrer cada um
        dos itens de uma collection, como um Array ou um Hash. Então, olhe para uma fonte de IO como uma
        coleção de linhas. O iterator pode percorrer essa coleção de linhas.


        <pre>
         class IO
           # Definição do método each_line.  Veja que ele não tem
           # uma lista de argumentos. Blocos não precisam ser listados como argumentos.
           def each_line
             until eof?        # até chegarmos ao final do arquivo...
               yield readline  # passe a linha para o bloco
             end
           end
         end
        </pre>


        A palavra-chave @yield@ é a maneira mais fácil de se usar um bloco. Uma palavra. Da mesma forma
        que uma cortina tem um puxador ou como uma maleta tem uma alça. Dentro de um método, você
        pode apertar o botão piscante @yield@ e ele irá rodar o bloco anexado a esse método. Ele ficará
        brilhando em vermelho até que o bloco seja executado. Então voltará a piscar de novo e você poderá
        o botão novamente se quiser.


        <pre>
         def yield_thrice
           yield
           yield
           yield
         end
        </pre>


        Aperte o botão @yield@ três vezes rapidamente e o bloco ganha vida por três vezes.


        <pre>
         irb> a = ['primeiro, o nascimento', 'depois, uma vida cheia de imagens bonitas', 'e finalmente, o fim']
         irb> yield_thrice { puts a.shift }
         # prints out:
         #   primeiro, o nascimento
         #   depois, uma vida cheia de imagens bonitas
         #   e finalmente, o fim
        </pre>


        O método @shift@ tira o primeiro item de um Array. O barbeiro @shift@ corta o cabelo fora e
        o entrega. Depois o escalpo. E assim segue, reduzindo o pobre coitado a nada.


        Você viu blocos anexado a métodos. Qualquer método Ruby pode ter um bloco anexado no final.


        <pre>
         # O estilo compacto de anexar um bloco a um método.
         # Aqui o bloco é demarcado por chaves.
         open( "idea.txt" ) { |f| f.read }

         # O estilo verboso de anexar um bloco.
         # Aqui o bloco é demarcado por 'do' e 'end'
         open( "idea.txt" ) do |f|
           f.read
         end
        </pre>


        Se você passar argumentos para o @yield@, esse argumentos também serão passados ao bloco. 
        O bloco vai num pequeno sidecar preso à motocicleta do método. O método vocifera uma lista 
        de argumentos, gritando para o bloco mesmo com todo o vento enquanto eles estão dirigindo 
        pelo deserto. O bloco bate no capacete com se dissesse: "Ok, entendi. Meu cérebro captou tudo."


        <pre>
         # O método abre dois arquivos e repassa os objetos IO resultantes
         # para o bloco anexo
         def double_open filename1, filename2
           open( filename1 ) do |f1|
             open( filename2 ) do |f2|
               yield f1, f2
             end
           end
         end
 
         # Imprime os arquivos lado a lado
         double_open( "idea1.txt", "idea2.txt" ) do |f1, f2|
           puts f1.readline + " | " + f2.readline
         end
        </pre>


        Você pode se perguntar o que o @yield@ tem a ver com sinais de trânsito. Na verdade, essa
        é uma boa pergunta, e que eu acredito que tenha uma boa resposta. Quando você executa um método,
        você está a esse método o controle do seu programa. Controle para fazer o seu trabalho e retornar
        com uma resposta.


        Com @yield@, o método está parando nessa intersecção, devolvendo o controle para você, para o seu bloco.
        O método está permitindo que você faça o seu trabalho antes de retornar ao trabalho dele. Então, enquanto
        o método @each_line@ faz o trabalho de ler linhas de um arquivo, o *bloco anexado ao método @each_line@*
        recebe a linha e tem a chance de dar um passeio com ela no sidecar.
