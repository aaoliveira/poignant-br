    - Um Castelo Tem Seus Computadores: >

        !i/dr.cham-3.jpg(Os vales panorâmicos de Sedna em Endertromb.)!


        Nosso intrépido Doutor partiu para o castelo alienígena, lançando-se sobre as flores.
        O chão passou por seus calcanhares.  O castelo aparecia gradativamente no horizonte.  Ele desejave ter um cavalo garanhão, mas nenhum cavalo
        apareceu.  E foi assim que ele descobriu que o planeta não leria sua mente e não responderia seus
        pedidos.


        Porém, como o instrutor de órgão da minha filha havia me explicado, o planeta *podia ler mentes* e *podia
        realizar desejos*.  Só que não os dois ao mesmo tempo.


        Um dia questionando o maestro de órgão, ele rascunhou o seguinte código Ruby numa folha
        de papel cor-de-queijo.  (E cheiros estranhos de queijo estavam vindo de algum lugar,
        eu não posso dizer onde.)


        <pre>
         require 'endertromb'
         class FazedorPedidos
           def initialize
             @energia = rand( 6 )
           end
           def realize( pedido )
             if pedido.length > 10 or pedido.include? ' '
               raise ArgumentError, "Pedido ruim."
             end
             if @energia.zero?
               raise Exception, "Sem energia."
             end
             @energia -= 1
             Endertromb::realize( pedido )
           end
         end
        </pre>


        Este é o fazedor de pedidos.  


        Na verdade, não, esta é a *definição de um fazedor de pedidos.*  Para o Ruby, é uma *definição de classe*.
        O código descreve como um certo *objeto* vai funcionar.


        Toda manhã, o fazedor de pedidos  inicia com até cinco pedidos disponíveis para serem concedidos.
        Um novo @FazedorPedidos@ é criado quando o sol levanta.


        <pre>
         pedidos_do_dia = FazedorPedidos.new
        </pre>


        O método @new@ é um método de classe que cria um novo, objeto em branco.  Ele também chama o método
        @initialize@ (inicializar) do objeto automaticamente.  Na definição do @FazedorPedidos@ , você vai ver o método
        @initialize@, que contém uma única linha de código: @@energia = rand( 6 )@.


        O @rand( 6 )@ sorteia um número entre 0 e 5.  Este número vai representar quantos pedidos
        ainda restam no dia.  Então, ocasionalmente não haverá pedidos disponíveis do fazedor de
        pedidos.


        O número aleatório é dado à uma *variável de instância* de nome @@energia@.
        Esta variável de instância estará disponível a qualquer momento por toda a classe.  A variável
        não pode ser usada fora do *escopo* da classe.


        No capítulo três, demos uma breve olhada em variáveis de instância e decidimos respeitá-las
        como *atributos*.  (O símbolo *arroba* poderia significar *atributo*.)  Variáveis de instância podem
        ser usadas para guardar qualquer tipo de informação, mas elas são mais usadas para se guardar pedaços
        de informação sobre o objeto representado pela classe.


        No caso acima, cada fazendor de pedidos para o dia tem seu próprio nível de energia.  Se o fazendor de pedidos
        fosse uma máquina, você talvez veria um medidor nele que marca a energia restante.
        A variável de instância @@energia@ agirá como esse medidor.


        <pre>
         pedidos_do_dia = FazedorPedidos.new
         pedidos_do_dia.realize( "chifres" )
        </pre>


        Ok, dê um passo atrás e tenha certeza de entender este exemplo aqui.  A classe @FazedorPedidos@ é a base
        que elaboramos de como toda a mágica dos pedidos funciona.  Não é o _realmente_ o gênio na lâmpada,
        é a papelada por trás das cenas.  São as regras e obrigações em que o gênio vive.


        É o @pedidos_do_dia@ que é o gênio da lâmpada.  E aqui estamos dando um pedido a ser realizado.
        Nos dê uma galhada, gênio.  (Se você realmente arranjar uma galhada neste exemplo, eu nem quero saber.
        Vá saltitar em campinas verdes com seus amigos.)


        No capítulo anterior, o treinamento era: Ruby tem duas metades.


        # Definindo coisas.

        # Colocando estas coisas em ação.


        O que são as ações no Ruby?  Métodos.  E agora, você está provando a linguagem de definição
        interna do Ruby.  Definições de métodos usando @def@.  Definições de classe usando @class@.


        Neste ponto da sua instrução, é mais fácil entender que *tudo no Ruby é um objeto.*


        <pre>
         numero = 5
         print numero.next                 # imprime '6'

         frase = 'desejando por chifres'
         print frase.length                # imprime '19'

         pedidos_do_dia = FazedorPedidos.new
         pedidos_do_dia.grant( "chifres" )
        </pre>


        E, consequentemente, cada objeto tem uma classe nos bastidores.


        <pre>
         print 5.class                         # imprime 'Integer'
         print 'desejando por chifres'.class   # imprime 'String'
         print FazedorPedidos.new.class        # imprime 'FazedorPedidos'
        </pre>


        Dr. Cham nunca viu o fazedor de pedidos enquanto desbravava a paisagem.
        Ele ficava bem além das terras dele, no vale de Sedna.  Penhascos cheios de
        porções de bosques, onde você podia jogar seus pedidos (escritos
        num tirinha 1" x 6"), dentro do sumidouro.  Com sorte ele pousará
        nas costas de um lagarto, espetando em seu chifrinho pontiagudo dele.


        E digamos que seu pedido chegue lá.  Bem, então, _descendo pela floresta contorcida_ vai a magra
        salamandra, correndo através das igrejas descendentes que foram *empurradas*
        para a íngreme base do desfiladeiro de uma vez por todas.  E o desfalecido padre dentro, _que
        também resitiu a queda_, matará o pequeno anfíbio -- estrangulando-o até
        a morte com uma corrente abençoada de ouro -- e guardá-lo para as comemorações do _Conhecendo Seu_
        café da manhã.  Ele pisará no seu pequeno e precioso pedido e, quando os 
        *ladrões vierem*, aquele papel ainda estará lá, preso na sola do sapato dele.  Claro,
        o *meio preferido de tortura* dos ladrões é cortar um padre em finíssimas fatias _da cabeça
        aos pés_.  Quem pode catar evidências disto?  E quando eles fatiam a última fatia da sola do
        sapato, eles terão aquele *escalpo de borracha* nas mãos para _boa sorte_ e _bons tempos_.
        Mas eles *canoam* com muita força, estes ladrões.  Eles batem seus remos rapidamente na corrente
        para manter o grande _vapor do motor externo_ .  Mas a sola de sapato _está em uma cadeia fraca_, presa
        ao cinto de um dos homens.  E uma *velha carpa cabeluda* _salta, agarra_ esta fração de minuto
        de calçado.  E os ladrões  _podem tentar_, mas eles não veem _embaido d'água_.  Se eles pudessem, eles veriam
        aquele *cabo poderoso*, empacotado com milhões de _necessariamente_ fibras ópticas.  , *esse peixe é
        um periférico conectado* direto ao _núcleo de trabalho_ do planeta Endertromb.  *Tudo que ele pega é
        um gole* daquele peixe *e seu desejo está liberto!*


        E é assim que os pedidos das crianças se realizam neste lugar.


        Uma vez que o instrutor de órgão da minha filha tenha desenhado a classe para o fazendor de pedidos, 
        ele continuou com uma classe para o leitor de mentes do planeta.


        <pre>
         require 'endertromb'
         class LeitorMental
           def initialize
             @mentes = Endertromb::procurar_por_consciencia
           end
           def read
             @mentes.collect do |mente|
                mente.read
             end
           end
         end
        </pre>


        Como você já viu antes, o @initalize@ acontece quando um novo (new) objeto @LeitorMental@ é criado.
        Este @initialize@ gathers scans the planet for mindshare.  Parece que as mentes
        estão guardadas em um array, já que há uma iteração nelas no final usando o método @collect.@


        Ambos o fazedor de pedidos e o leitor mental referem-se a uma classe chamada @Endertromb@.  Esta classe está
        guardada em um arquivo @endertromb.rb@, que é carregado com o código: @require 'endertromb'@.
        Você vai, muitas vezes, usar outras classes para realizar parte da sua tarefa.  Most of the latter half of this
        book will explore the a grande variedade de classes úteis que podem ser carregadas no Ruby.


        h3. Dr. Cham Arrisca Entrar


        Mas assim que o Dr. Cham se aproximou do castelo, mesmo o planeta sabendo seus pensamentos, 
        sentindo susensing hi
        wonderment and anticipation, all Dr. Cham felt was deadness.  He tromped up the steps of its
        open gate and through the entrance of the most beautiful architecture and was almost certain it
        was deserted.


        For a while he knocked.  Which paid off.


        !i/castle-1.jpg(Blocky whale greeting.)!


        He watched the baby whale rise like a determined balloon.  He marvelled at his first alien introduction
        and felt some concern that it had passed so quickly.  Well, he would wait inside.


        Assim que ele entrou pela porta do castelo, se sentiu com sorte pela porta não ter sido atendida por 
        uma águia gigante com garras afiadas, ávida pra brincar.  Ou um cabeça de rato gigante.  Ou até mesmo um
        furacão Or even a man-sized hurricane.  Somente uma pequena baleia rechonchuda choo-choo.


        "Not a place to sit down in this castle," he said.


        À primeira vista, ele pensou ter entrado em um saguão escuro, mas assim que seus olhos se ajustaram, ele viu
        que a entrada se extendia em um túnel.  A porta do castelo seu abriu bem em uma passagem feita de pedaços 
        longos, e planos de rocha.  Algumas partes eram congruentes e lembravam um corredor.  Outras partes 
        eram estreitas, e até se inclinadas, o fim sumia de vista.


        A passagem era iluminada por pequenas geladeiras sem portas, big enough to hold an armful of cabbage, 
        down by his feet.  He peered inside one, which was hollow, illuminated along all sides, and
        turning out ice shards methodically.


        He pawed the ice chips, which clung dryly to his fingertips, and he scrubbed his hands in the
        ice.  Which left some muddy streaks on his hands, mas satisfez um pouco sua saudade de um banho.
        Quanto tempo já fazia?  Dez anos?  Trinta?


        Pela passagem, longos tubos de tecido lotavam algumas seções.  Mais tarde, matéria brilhante feita de pixels em
        vertedouros de porcelana e baldes.


        Ele caiu em uma sala que havia sido escavada ao lado do túnel e nela haviam alguns cascos de tartaruga vazios
        no chão e uma grande parede iluminada.  He examinou a sala, perplexo.  O que seria isso?
        Por um instante, ele pensou em sentar em um casco.  Isto poderia ser a entrada finalmente, algum
        tipo de receiving room.  Por outro lado, aranhas poderiam sair dos buracos dos cascos quando ele sentasse.
        Ele seguiu viagem.

        
        h3. Refeição no Bolso do Castelo


        As he journeyed along the passageways (for the central tunnel forked and joined larger, vacuous caverns), he picked up
        themes in some locations.  Groups of rooms infested with pumping machinery.  Cloth and vats of glue
        dominated another area.  He followed voices down a plush, pillowed cavity, which led him to a
        dead end: a curved wall with a small room carved at eye-level.


        Ele se aproximou da parede e, dentro do buraco quadrado, estavam dois porcos-da-terra comendendo à mesa.


        Eles o encaram serenamente, ambos degustando um pouco de besouros escavados, que davam dois deles, abertos ao meio 
        e parados com as costas na mesa.


        "Olá, bonequinhos," ele disse, e eles terminaram suas mordidas e ficaram olhando com seus garfos
        held aloof.


        "Eu queria que minha sobrinha Hannah estive aqui para conhecê-los," disse ele aos atenciosos 
        porcos-da-terra. "Ela pensaria que vocês são um intricado show de ventriloquismo."  
        He peered in at the dining area, shelves with sets of plates, hand towels.  
        Half of a tiny rabbit was jutting out from the top a machine, creamy red noodles were spilling
        out underneath it.  A door at the back of the room hung ajar.  Dr. Cham could
        see a flickering room with chairs and whirring motors through the door.


        "Toda criança gostaria desta casa de bonecas," ele disse.  "Hannah, minha sobrinha,
        como mencionei, ela tem uma boneca que senta em um fuso e começa a soltar fio. 
        É uma ilusão, é claro.  A boneca não produz fio algum."


        Um dos porcos-da-terra abriu um alçapão no chão e pressionou um botão ali, que se iluminou.
        Então, um pequeno projetor de filme veio lentamente sob trilhos.  O outro porco-da-terra 
        sentou e olhou o Dr. Cham.
       

        "But Hannah still reaches down into the dollhouse and collects all the imaginary yarn into a
        bundle.  Which she takes to her mother, my sister, who is very good at humoring Hannah.
        Ela costura um vestido no tamanho da boneca, o qual Hannah leva até a boneca.


        "E ela diz à boneca,
        'Aqui, olhe, seu trabalho duro e perseverança resultaram neste lindo vestido.
        Agora você pode aceitar o convite e acompanhar, hoje à noite, o Chefe de Polícia na Mansão
        do Governador.'  E ela tem uma boneca vestida de policial que faz o papel do Chefe. 
        Ele é muito raquítico pra ser o Chefe de verdade, isso precisaria de um bom pedaço de plástico."


        O porco-da-terra responsável pelo projetor o carregou com um rolo e o mirou na parede do
        fundo.  O filme começou e os porcos-da-terra se sentaram.  Um quadrado verde apareceu na
        parede.  O atencioso porco-da-terra encarou o Dr. Cham parado.


        "Seus filmes são coloridos," disse o Dr. Cham.  "What a lovely, little life."


        O filme exibido foi: um quadrado azul.  Aí, um círculo vermelho.  Aí, um quadrado laranja.  Os atenciosos
        porcos-da-terra se viraram, assistiram a tela virar um triângulo rosa, e ambos porcos-da-terra voltaram a comer.


        Uma estrela roxa.  Um quadrado vermelho.  With quietness settling, Dr. Cham could hear notes droning
        from the projector.  Like a slow, plodding music box trying to roll its gears along the train
        tracks.


        "Sim, aproveitem o jantar," disse o Dr. Cham e educadamente se virou, marchando
        de volta no caminho que ele tomara.


        h3. Outra Rua Sem Saída Onde as Coisas Começam


        Ele se encontrou perdido nos túneis do castelo.  Nada parecia familiar.  Todavia, ele não estava muito preocupado.
        Ele estava noutro planeta.  Ele estava perdido de qualquer maneira.


        Ele se contorceu pelos túneis, tentando lembrar o caminho, mas muito mais interessado
        em explorar para lembrar seus passos.  Ele seguiu um único túnel profundamente, descendo, descendo,
        ficou tão inclinado que ele tinha que pular entre as beiradas e cuidadosamente achar apoio para os pés.
        A gravidade aqui não parecia ser diferente da Terra.  Ele escorregava com a mesma facilidade.


        Mesmo sem ter absolutamente nenhuma maneira de saber onde ele estava, ele tinha certeza de ter saído
        dos limites do castelo.  Esta profundidade, este tanto de caminhada.  Já fazia uma hora desde que ele
        adentrara a porta.  E, as the tunnel wound back up, he was sure that he would
        emerge into a new dwelling, perhaps even a manhole which he could peek out from and see
        the castle.  Talvez ele não devesse ter ido tão longe nessa rota.  Ele espera que nada esteja
        hibernando aqui emabaixo.


        O túnel chegou ao fim.   Um escuro, fim sem saída.


        !i/dr.cham-4.gif(No fim dos túneis: um computador e um livro.)!


        Ele tinha tempo.  Então ele leu o livro.  Ele leu sobre os raposos e sua perseguição ao porco-espinho que roubou
        a caminhonete deles.  Ele leu sobre o elfo e o presunto.  Ele He saw the pictographs of himself and found he
        could really relate to his own struggles.  Ele até aprendeu Ruby.  Ele viu como isso tudo termina.


        Eu não teria estômago pra isso, no lugar dele.  Mas ele teve.  And he pledged in his bosom to see
        things out just as they happened.


        No monitor do computador, o Dr. Cham viu o prompt do @irb@ piscando.  Assim como o Dr. Cham, você deve
        reconhecer o prompt do @irb@ prompt do "O Colete Do Tigre":expansion-pak-1.html
        (o primeiro pacote de expansão deste livro, que inclui uma introdução básica ao IRB - Interactive Ruby.)


        Assim como ele acabou de explorar os túneis a pé, agora ele explora as configurações da máquina com
        a prompt.  Ele colocou o livro onde o encontrou.  Ele não precisava mais dele.  This was
        all going to happen whether he used it or not.


        Ele começou com:


        <pre>
         irb> Object::constants
           => ["Marshal", "String", "Dir", "LoadError", "Float", ... e por aí vai ]
        </pre>


        Este comando lista as constantes de nível mais alto.  Classes são listadas como constantes também, 
        então esta lista é ótima pra ver o que está carregado no ruby a qualquer momento.


        Ele examinou a lista procurando algo não familiar.  Qualquer classe que não vem com o Ruby.
        @Marshal@, @String@, @Dir@, @LoadError@, @Float@.  Cada uma dessas vêm com o Ruby.


        Mas um pouco pra baixo na lista:


        <pre>
         ... "Struct", "Values", "Time", "Elevador", "Range" ...
        </pre>
        

        _Elevador?_  Exatamente o tipo de classe a se bisbilhotar.  Ele tinha onde irra.


        <pre>
         irb> Elevador::methods
           => ["method", "freeze", "allocate", ... outra lista grande ... ]
         irb> Elevador::class_variables
           => ['@@relatorio_diagnostico', '@@circuito_eletrico_ativo', '@@senha_manutencao']
         irb> Elevador::constants
           => []
        </pre>


        Parece que a classe @Elevator@ tem um monte de métodos.  A maioria deles parece
        ser os mesmo métodos que todo objeto tem no Ruby.  Por exemplo,
        @method@, @freeze@ e @allocate@ vêm com toda classe no Ruby.  (@Elevador::freeze@
        não deixaria que a classe @Elevator@ seja alterada.  @Elevador::allocate@ criaria
        um novo objeto @Elevator@ sem chamar o método @initialize.@)


        As @class_variables@ foram interessantes pro Dr. Cham.  Este elevador parece genuíno.
        Mas sem @constantes@ disponíveis.  Isso nos diz que não há classes aninhadas dentro
        da classe @Elevator.@


        Ele tentou criar um objeto @Elevator.@


        <pre>
         irb> e = Elevador::new
         ArgumentError: wrong number of arguments (0 for 1), requires a password
                 from (irb):2:in `initialize'
                 from (irb):2:in `new'
                 from (irb):2
                 from :0
        </pre>


        Ele tentou algumas senhas.

 
        <pre>
         irb> e = Elevador::new( "pra cima" )
         AccessDeniedError: bad password
         irb> e = Elevador::new( "subindo" )
         AccessDeniedError: bad password
         irb> e = Elevador::new( "escadas_sao_terriveis" )
         AccessDeniedError: bad password
         irb> e = Elevador::new( "EscadasSaoTerriveis" )
         AccessDeniedError: bad password
        </pre>


        Aqui foi inútil.  _Oh, espere!_  A senha de manutenção.  Listada nas @class_variables@.


        <pre>
         irb> Elevador::senha_manutencao
         NoMethodError: undefined method `senha_manutencao' for Elevador:Class
                 from (irb):1
                 from :0
        </pre>


        Hmm.  Variáveis de intância só estão disponíveis dentro de um objeto.  E variáveis de classe só estão
        disponíveis dentro de uma classe.  Como conseguir aquela senha?


        <pre>
         irb> class Elevator
         irb>   def Elevador.senha_manutencao
         irb>     @@senha_manutencao
         irb>   end
         irb> end
           => nil
         irb> Elevador::senha_manutencao
           => "escadas_sao_passado!"
        </pre>
 

        Agora sim!  Conseguimos a senha.  Você viu aquilo?


        Ele adicionou um método de classe à classe @Elevator.@  Não é ótimo como você pode começar a definir
        uma nova classe @Elevador@ e o Ruby simplesmente adiciona susas modificações na definição de classe já existente?


        Métodos de classe são geralmente chamadaos com os *dois pontos duplos*.  Mas, um ponto também serve.
        Já que @Elevador@ é uma classe por si só, Ruby vai entender que se você chama @Elevador.senha_manutencao@,
        você está chamando um método de classe.  Os dois pontos duplo simplesmente ajudam a tornar métodos de classe óbvios
        para o leitor.


        And justly so.  Métodos de classe são um pouco comuns.  Normalmente você não quer guardar informação
        diretamente dentro de uma classe.  Contudo, se você tem um pedaço de informação que você precisa
        compartilhar com todos os objetos de uma classe, ento você tem um bom motivo pra usar a classe como armazenamento.
        É compreensível que a @@@senha_manutencao@ tenha sido armazenada na classe, invés de
        cada objeto separado.  Deste modo, O objeto pode simplismente alcançar a classe e ver a senha
        compartilhada.


        Provavelmente é assim que a proteção por senha funciona.


        <pre>
         class Elevador
           def initialize( senha )
             raise AccessDeniedError, "senha incorreta" \
               unless senha.equals? @@senha_manutencao
           end
         end
        </pre>


        Proteger uma classe assim não faz sentido, já que tudo no Ruby pode ser alterado e 
        reescrito e remoldado.  O Dr. Cham tinha a senha e agora o elevador era dele.


        <pre>
         irb> e = Elevador.new( "escadas_sao_passado!" )
         #<Elevador:0x81f12f4 @level=4>
         irb> e.andar = 1
        </pre>


        Dr. Cham estava parado lá quando as portas do elevador, atrás do terminal do computador,
        se abriram pra ele.  With an exasperated sense of accomplishment and a good deal of excitement
        surrounding all of the events that lie ahead, ele entrou no elevador e apertou o 4.


