        Você percebeu?  Sempre que criamos um objeto no @irb@, essa chamativa palavra @#<Object>@ 
        é apresentada!  Isto é um pequeno nome identificador para o objeto.  O método @inspect@ cria
        este identificador, que é apenas uma string.


        <pre>
         irb> class Coelho
         irb>   attr_accessor :slogan
         irb>   def initialize s; @slogan = s; end
         irb>   def inspect; "#<#{ self.class } diz '#{ @slogan }'>"; end
         irb> end

         irb> class FalsoCoelho < Coelho
         irb> end

         irb> Coelho.new "eu arrebentei a cara do dragão!!"
           => #<Coelho diz 'eu arrebentei a cara do dragão!!'>
         irb> FalsoCoelho.new "Assim, assim e assim..."
           => #< FalsoCoelho diz 'Assim, assim e assim...'>
        </pre>

        
        O fato é: @irb@ está respondendo.  Cada vez que você executa algum código no @irb@,
        o _valor de retorno_ daquele código é inspecionado.  Que prático.  É uma conversinha
        entre você e o @irb@. E @irb@ está apenas reiterando o que você está dizendo, então
        você mesmo pode ver.


        Você poderia escrever seu próprio prompt Ruby de uma forma muito fácil:


        <pre>
         loop do
           print ">> "
           puts  "=> " + eval( gets ).inspect
         end
        </pre>
         

        Este prompt não irá permitir que você escreva código Ruby mais longo do que uma única 
        linha. No entanto, esta é a essência do Ruby interativo. Como que você gosta?  Dois de seus 
        conceitos recentemente aprendidos vieram juntos de um modo mais saboroso.  O @eval@ pega o
        código digitado e o executa.  A reposta de @eval@ é então inspecionada.


        Agora, como você está combatendo monstros no @irb@, o Labirinto de Dwemthy será inspecionado e 
        respondido com os monstros que você deixou de lutar.


        !i/wixl-5.gif(As raposas comem fora.)!


        h3. Method Missing


        Você não odeia quando grita "Deirdre!" e aproximadamente dez pessoas respondem?  Isto _nunca_ 
        acontece em Ruby.  Se você chamar o método @deirdre@, somente um método @deirdre@ responde.  
        Você não pode ter dois métodos com o mesmo nome.  Se você adicionar um segundo método @deirdre@,
        o primeiro desaparece.


        Você pode, no entanto, ter um método no qual *responde para muitos nomes*.


        <pre>
         class ChamadorDeNome
           def method_missing( nome, *args )
             puts "Você está chamando '" + nome + "' e você diz:"
             args.each { |diz| puts "  " + diz }
             puts "Mas ninguém está lá ainda."
           end
           def deirdre( *args )
             puts "Deirdre está bem aqui e diz:"
             args.each { |diz| puts "  " + diz }
             puts "E ela ama cada segundo disso."
             puts "(Eu acho que ela pensa que você é poético.)"
         end
        </pre>


        Quando você chamar o método @deirdre@ acima, eu tenho certeza que você sabe o que vai 
        acontecer.  Deirdre vai amar cada segundo disto, você e suas fascinantes poesias.


        Mas e se você chamar @simon@?


        <pre>
         irb> ChamadorDeNome.new.simon( Olá?', 'Olá? Simon?' )
         Você está chamando `simon' e você diz:
           Olá?
           Olá? Simon?
         Mas ninguém está lá ainda.
        </pre>
        

        Sim, @method_missing@ é como uma secretária eletrônica, que intercepta a chamada de
        seu método.  No Labirinto de Dwemthy nos usamos um desvio, então quando você ataca o Array, ele passa
        o ataque diretamente para o primeiro monstro no Array.


        <pre>
         def method_missing( meth, *args )
           resposta = first.send( meth, *args )
           # ... código recortado aqui ...
         end
        </pre>


        Veja!  Veja!  Aquele magrelinho @method_missing@ passa a responsabilidade para outro!

