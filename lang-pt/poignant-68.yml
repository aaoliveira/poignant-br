    - >
        Metaprogramação é a _escrita de código que escreve código_. Mas não como M. C. Escher rascunharia. *O programa não fica
        voltando e se escrevendo e nem o programa fica pulando de seu monitor e arrancando o teclado de suas mãos.*  Não, é bem
        menor que isso.


        Vamos dizer que é parecido *com uma pílula laranja* que você ganhou no circo. Quando você chupa ela e o sabor vai embora,
        atrás do seu dente esconde um grande, esponjoso brontossauro.  Ele escorrega por sua língua e pula livremente, brincando 
        sobre as pastagem e gritando: "Papai!" E a partir desse momento, sempre que ele enlouquecer vai atacar uma van, bem, essa
        van vai ficar brilhante depois.


        Agora, vamos dizer que _alguém_ coloque *aquela pequena pílula laranja* debaixo da torneira. Não na língua, _debaixo da torneira_. E isso aciona uma catalisação diferente,
        que cria um grupo de sêxtuplas esponjas choramingantes, *com cordão umbilical e tudo mais.*  Ainda assim muito 
        prático para se limpar a van.  Mas um grupo totalmente diferente de camurça. E, um dia, esses seis irão fazer
        o papai chorar quando tocarem em um concerto de violino.


        Metaprogramação é um conjunto de código dentro de um formato de pílula, que uma pequena gota de água pode acionar para se expandir.
        Mais importante, você pode controlar a reação da pílula, de uma forma que o brontossauro pode ser criado magro e desajeitado.
        Ou sêxtuplos, *CERTAMENTE*, ou costureiras, ou cérebros de gato, ou dragões.
    

        <pre>
         class Dragao < Criatura
           vida 1340    # escamas duras
           forca 451    # veias ressaltadas
           carisma 1020 # sorridente
           arma 939     # cospe fogo
         end
        </pre>
    

        Isso ainda não é metaprogramação. Apenas a pílula. O _produto_ da metaprogramação. Estamos fazendo uma pausa, olhando
        para a besta antes de descer abaixo o seu tecido muscular com um bisturi e um microscópio.


        O @Dragao@ é uma classe.  Você já viu muitas vezes. O @Dragao@ é descendente da classe @Criatura@.
    

        Agora, olhe para cima. Preste atenção. A classe @Criatura@ contém o código de metaprogramação. Você pode escreve código
        de metaprogramação que pode ser usado em _qualquer lugar_, ao longo de todo Ruby, em @Criatura@ ou @Dragao@, em @String@
        ou em @Object@, qualquer lugar.  O nosso exemplo aqui, uma vez que esta é a forma mais comum de meta-código, foca em 
        metaprogramação dentro de classes apenas.


        Cada uma das características de @Dragao@ são apenas *métodos de classe*. Você também poderia escrever assim:


        <pre>
         class Dragao < Criatura
           vida( 1340 )    # escamas duras
           forca( 451 )    # veias ressaltadas
           carisma( 1020 ) # sorridente
           arma( 939 )     # cospe fogo
         end
        </pre>


        Removendo os parênteses remove-se a confusão, então vamos deixar sem.  Apenas use parênteses quando
        estiver usando muitos métodos juntos e você quer ser bem claro.


        h3. Código da Criatura


        Agora, com um corte lateral em todo o diafragma, nos mostraremos as entranhas da classe @Criatura@.
        *Salve esse código em um arquivo chamado @dwemthy.rb@.*
    

        <pre>
         # As vísceras da força vital do Labirinto de Dwemthy
         class Criatura

           # Obtém uma metaclasse para esta classe
           def self.metaclass; class << self; self; end; end

           # Avançado código de metaprogramação para boas 
           # e claras características
           def self.caracteristicas( *arr )
             return @caracteristicas if arr.empty?

             # 1. Define 'accessors' para cada variável
             attr_accessor *arr

             # 2. Adiciona um novo método para cada característica.
             arr.each do |a|
               metaclass.instance_eval do
                 define_method( a ) do |val|
                   @caracteristicas ||= {}
                   @caracteristicas[a] = val
                 end
               end
             end

             # 3. Para cada monstro o método 'initialize'
             #    deve usar um número padrão para cada característica.
             class_eval do
               define_method( :initialize ) do
                 self.class.caracteristicas.each do |k,v|
                   instance_variable_set("@#{k}", v)
                 end
               end
             end

           end

           # Os atributos da Criatura são somente leitura
           caracteristicas :vida, :forca, :carisma, :arma
         end
        </pre>


        Preste atenção no fechamento das linhas do código, especialmente na linha onde @caracteristicas@
        está sendo definido. Todo o código antes dessa linha determina o método @caracteristicas@.  Isto
        é semelhante ao básico do bilhete de loteria do capitulo anterior.

        <pre>
         class BilheteLoteria
           attr_reader :numeros_escolhidos, :data_compra
         end
        </pre>
