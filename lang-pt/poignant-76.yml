    - >
        "Todos esses escritos nas nuvens são conversa de cervos?" disse Raposinho.


        "Ajudem-me!  _Onde vocês estão, caras?_"  Raposão abaixou-se através de uma tempestuosa
        lengalenga formada por uma densa ondulada fumaça e moitas afiadas.  Ele girou em todas direções,
        "Alguém grite se estiver aí!"


        Procurou por uma fenda na densa matéria, penteando para frente com suas mãos. As eloquentes,
        furiosas nuvens responderam-no espetando-o para adiante, forçando-o para cantos apertados em
        suas breves pausas entre as frases. Ele ficou em um sumidouro e manteve sua cabeça baixa a medida
        que as cascatas de fumaça agitavam-se adiante.


        "Sim, os cervos podem ler estas coisas," afirmou Blix.  "Eles apenas encaram seus alvos e atiram-nas
        de suas narinas.  Escutei uma vez sobre um cara que tinha *cavalgado* em um poema de amor cervídeo."


        "Sem chance," falou Raposinho.


        "Sim," disse Blix.  "E este cara era eu."  Blix alcançou seu ombro e juntou-se a uma espiral
        de fumaça que girava acima de sua cabeça.  "Você apenas tem que saber quais nuvens são fracotes
        e quais são pomposas". Blix deixou a nuvem puxá-lo e quando a nuvem voou para cima, Blix perdeu
        seu apoio e manteve seus pés movendo vagarosamente ao longo do chão.  "Vê, está aqui é uma das boas,
        longa como um cabo de vassoura.  Um cara descobriu uma uma vez que tinha a forma _exatamente_ igual
        a de um carro: pára-brisa, airbags laterais para o motorista, direção hidráulica. "
        Excepcional!"


        "_E este cara era--_"


        *"Ele era!"*  E Blix escalou sobre a longa nuvem gelada, com seus hieróglifos pendurados,
        e manteve-se em pé orgulhosamente, flutuando bem acima da pontuda sombra do raposo.


        "Ah, eu poderia fazer isso" disse Raposinho.  "Eu e Raposão andamos de jetski o tempo todo.
        _Eu fico em pé no meu jetski._ É igualzinho a isso."


        Raposão lançou-se sobre uma fumaça descendente, chacoalhando sua frase, cujas letras se
        descolaram e se espalharam pelo chão com palavras embaralhadas, mas ele tinha apenas
        sucedido em alcançar as partes depressivas das correspondências dos cervos, que se
        manifestavam como uma úmida e opaca névoa.


        Enquanto isso, sua contraparte pequena agarrou um estreito trem de fumaça que passava sob
        seu braço.  Ele foi aerotransportado e gritou, *Tallyho!*  Mas se segurou muito firmemente
        e a nuvem evaporou sob seu braço e o enviou de volta ao chão com um pequeno salto.


        Dado que está apenas começando seu uso de Ruby, você pode não ter entendido completamente
        as expressões regulares (ou _regexps_) de início.  Você pode até mesmo se encontrar recortando
        as regexps da "Biblioteca de Expressões Regulares":http://regexlib.com/DisplayPatterns.aspx e
        colando-as no seu código sem ter a mínima idéia de porque a expressão funciona. Ou _se_ ela funciona!


        <pre>
         loop do
           print "Entre com sua senha: "
           senha = gets
           if senha.match( /^\w{8,15}$/ )
             break
           else
             puts "** Senha inadequada! Deve ter entre 8 e 15 caracteres!"
           end
         end
        </pre>
         

        Você vê a ilegível linguagem de cervo no código de exemplo? O @/^\w{8,15)$/@ é uma expressão
        regular.  Se posso traduzí-la, a regexp está dizendo,_Por favor, permita somente letras, números
        ou travessões. Não menos que oito e não mais que quinze._


        Expressões Regulares são uma mini-linguagem construída dentro do Ruby e muitas outras linguagens de programação.
        Eu, na verdade não deveria dizer _mini_, já que regexps podem ser complicadas e tortuosas e muito mais difíceis
        que qualquer programa Ruby.


        Usar expressões regulares é extremamente simples. É como o Cervo: fazer fumaça é um processo árduo.
        Mas forçar seus ombros sobre a fumaça e direcionar-se para o Weinerschnitzel para pegar um pretzel de 
        cachoro quente e mostarda é fácil.


        <pre>
         irb> "senha_adequada".match( /^\w{8,15}$/ )
           => #<MatchData:0xb7d54218>
         irb> "esta_senha_inadequada_muito_longa".match( /^\w{8,15}$/ )
           => nil
        </pre>


        O método @String#match@ é o _uso prático mais simples_ das regexps.  O método @match@
        checa para ver se a string se adequa as regras dentro da regexp.  Uma regexp só é útil
        com strings, para testar strings por uma série de condições. Se as condições são atendidas,
        um objeto @MatchData@ é retornado.  Caso contrário, você terá @nil@.


        As expressões regulares mais básicas são para *realizar buscas* dentro de strings. Digamos
        que você tem um grande arquivo e quer procurar nele por uma palavra ou frase.  Já que um
        tempinho se passou, vamos procurar dentro dos registros de Achados e Perdidos 
        dos Pré-eventualistas novamente.


        <pre>
         require 'preeventualist'
         PreEventualist.achadoperdido( 'caminhao' ) do |page|
           page.each_line do |linha|
             puts linha if linha.match( /caminhao/ )
           end
         end
        </pre>


        Isto não é muito diferente do código que usamos anteriormente para linhas com a palavra "caminhão". Anteriormente
        usamos @puts linha if linha['caminhao']@, o que é na verdade um jeito mais simples de se procurar dentro de uma string, se
        você está procurando apenas por uma simples palavra.  A regexp @/caminhao/@ é idêntica.  Encontre a palavra "caminhao".
        Em qualquer lugar da string.


        Hmn, mas e se caminhão for maiúscula. *Caminhão.* E então?


        <pre>
         puts linha if linha.match( /[Cc][Aa][Mm][Ii][Nh][Aa][Oo]/i )
        </pre>


        As *classes dos caracteres* são as seções cercadas por *colchetes*.  Cada classe de caractere dá uma lista
        de caracteres que são compatíveis para este lugar.  (O primeiro lugar é compatível tanto um @C@ maiúsculo
        quanto um @c@ minúsculo.  O segundo lugar é compatível com um @A@ ou um @a@. E assim por diante.)
        

        Mas um jeito mais simples de escrever isso é assim:


        <pre>
         puts line if line.match( /caminhao/i )
        </pre>


        A letra @i@ no final da regexp é um modificador que indica que a busca não é *sensível a caixa*. Ela casará
        com Caminhão. E CAMINHÂO. E CaMiNhÂo. E outras combinações de maiúsculas e minúsculas.


        Ah, e talvez seu caminhão tenha um certo número de modelo.  Um T-1000.  Ou um T-2000.  Você pode se lembrar.
        É algum T _alguma coisa_ mil.


        <pre>
         puts linha if linha.match( /T-\d000/ )
        </pre>


        Vê, linguagem de cervo.  O @\d@ representa um *digito*.  É uma incógnita na regexp para qualquer tipo
        de número.  A  regexp irá agora casar com T-1000, T-2000, e tudo em diante até T-9000.
