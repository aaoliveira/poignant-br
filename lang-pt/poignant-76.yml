    - >
        "Todos esses escritos nos nuvens são conversa de cervos?" disse Raposinho.


        "Ajudem-me!  _Onde vocês estão, caras?_"  The taller fox ducked through a stormy tirade comprised of
        thick, billowing smoke and sharp wisps.  He whirled in every direction, "Somebody yell if you're
        there!"
        
        
        He searched for a fissure in the dense matter, combing forward with his hands.  The verbose, angry
        clouds responded by prodding him ahead, forcing him into tight corners in their brief pause
        between sentences.  He landed in a sinkhole and kept his head down as the cascades of smoke
        surged forward.


        "Yeah, deer can read this stuff," said Blix.  "They just face their target and shoot it out of
        their nostrils.  I once heard of a guy who *rode* a stag's love poem."


        "Sem chance," falou Raposinho.


        "Sim," disse Blix.  "Aquele cara era eu."  Blix reached over his shoulder and latched onto
        a spiral column of smoke that was twisting just above his head.  "You just have to know
        which clouds are wimpy and which clouds are grandiloquent."  Blix let the cloud pull him along
        and when the cloud banked upwards, Blix loosed his grip and kept his feet moving slowly
        along the ground.  "See, here's a good one, long like a broom handle.  A guy found one once
        and it was shaped _exactly_ like a car: windshield, driver's side airbag, power steering.
        Uncanny!"


        "_And that guy was--_"


        *"It was!"*  And Blix climbed up atop the long icy cloud, with its dangling glyphs, and stood proudly,
        floating high above the small fox's pointy shadow.


        "Oh, I could do that," said Fox Small.  "Tall and I go jetskiing all the time.  _I've stood
        up on my jetski._  It's just like that."


        Fox Tall dashed through a descending puff, shattering its sentence, which letters
        came unglued and littered the ground with scrambled words, but he had only succeeded in
        reaching the depressive portions of the deer correspondence, which manifested itself
        as a dank and opaque mist.


        Meanwhile, his smaller counterpart grabbed a narrow train of smoke that passed under his
        arm.  He was airborned and yelled, *"Tallyho!"*  But he held too tightly and the cloud
        evaporated under his arm and sent him back down with a short hop.


        Since you're just beginning your use of Ruby, you may not fully grasp regular expressions
        (or _regexps_) at first.  You may even find yourself clipping out regexps from the "Regular
        Expression Library":http://regexlib.com/DisplayPatterns.aspx and pasting them into your
        code without having the foggiest idea why the expression works.  Or _if_ it works!


        <pre>
         loop do
           print "Entre com sua senha: "
           senha = gets
           if senha.match( /^\w{8,15}$/ )
             break
           else
             puts "** Senha inadequada! Deve ter emtre 8 e 15 caracteres!"
           end
         end
        </pre>
         

        Do you see the unreadable deer language in the example code?  The @/^\w{8,15)$/@ is a regular
        expression.  If I may translate, the regexp is saying, _Please only allow letters, numbers or
        underscores.  No less than eight and no more than fifteen._


        Expressões Regulares são uma mini-linguagem built into Ruby and many other programming languages.
        I really shouldn't say _mini_, though, since regexps can be twisted and complicated and much more
        difficult than any Ruby program.


        Using regular expressions is extremely simple.  It is like the Deer: making the smoke is an
        arduous process.  But hooking your elbow around the smoke and driving it to the Weinerschnitzel
        to get mustard pretzel dogs is easy.


        <pre>
         irb> "good_password".match( /^\w{8,15}$/ )
           => #<MatchData:0xb7d54218>
         irb> "this_bad_password_too_long".match( /^\w{8,15}$/ )
           => nil
        </pre>


        The @String#match@ method is the _simplest practical use_ of regexps.  The @match@ method
        checks to see if the string meets the rules inside the regexp.  A regexp is only useful with
        strings, to test strings for a series of conditions.  If the conditions are met, a @MatchData@
        object is returned.  If not, you get @nil@.


        The most basic regular expressions are for *performing searches* inside strings.  Let's say
        you've got a big file and you want to search it for a word or phrase.  Since a bit of time
        has passed, let's search the Preeventualist's Losing and Finding Registry again.


        <pre>
         require 'preeventualist'
         PreEventualist.searchfound( 'truck' ) do |page|
           page.each_line do |line|
             puts line if line.match( /truck/ )
           end
         end
        </pre>


        This isn't too different from the code we used earlier to search for lines with the word "truck".  Earlier
        we used @puts line if line['truck']@, which is actually a simpler way of searching a string, if you're
        just looking for a simple word.  The regexp @/truck/@ is identical.  Find the word "truck".  Anywhere in the string.


        Uhm, what if truck is capitalized.  *Truck.*  What then?


        <pre>
         puts line if line.match( /[Tt][Rr][Uu][Cc][Kk]/i )
        </pre>


        The *character classes* are the sections surrounded by *square brackets*.  Each character class gives
        a list of characters which are valid matches for that spot.  (The first spot matches either an uppercase @T@
        or a lowercase @t@.  The second spot matches an @R@ or an @r@.  And so on.)


        But a simpler way to write it is like this:


        <pre>
         puts line if line.match( /truck/i )
        </pre>


        The letter @i@ modifier at the end of the regexp indicates that the search is *not case-sensitive*.  It
        will match Truck.  And TRUCK.  And TrUcK.  And other ups and downs.


        Oh, and maybe you're truck is a certain model number.  A T-1000.  Or a T-2000.  You can't remember.  It's
        a T _something_ thousand.


        <pre>
         puts line if line.match( /T-\d000/ )
        </pre>


        See, deer language.  The @\d@ represents a *digit*.  It's a place holder in the regexp for any type of
        number.  The regexp will now match T-1000, T-2000, all the way up to T-9000.
