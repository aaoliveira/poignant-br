
      h3. Lendo o Console (Terminal)


      Eu sei que o console (também conhecido como terminal ou prompt) com certeza parece desconcertante.  Bem, vamos logo dissecá-lo.  É muito simples.
      O console tem três partes, cada uma separada por *dois pontos*.


      A primeira seção, onde está escrito @irb(main)@, mostra *o nome do programa* que estamos rodando.  A segunda
      seção mostra o número da linha, *um contador de quantas linhas de Ruby nós digitamos*.  A terceira seção é *um
      nível de profundidade*.  Toda vez que você abrir uma expressão que precisa ser fechada, o nível de profundidade 
      vai aumentar uma unidade. E toda vez que o Irb detectar que seu código não está terminado, *o fim do console
      vai virar um asterisco.*  


      <pre>
       irb(main):001:0> campainha = :apertada
       => :apertada
       irb(main):002:0> arma_de_gelo =
       irb(main):003:0*   if campainha == :apertada
       irb(main):004:1>     :ligar
       irb(main):005:1>   else
       irb(main):006:1*     :desligar
       irb(main):007:1>   end
       => :ligar
      </pre>
        

      Veja como o nível de profundidade aumentou para 1 quando eu abri o @if@.  E como o asterisco indica a
      continuação da linha.


      h3. Ajustando o Console


      Você não tem que gostar da aparência do console, entretanto.  Não estou forçando você a fazer nada e,
      se você quer hackeá-lo, estou ao seu lado.


      O Irb tem mais alguns consoles que podem agradar seus sentidos.  Tente @irb --prompt simple@.
      Desta vez o Irb vai lhe proporcionar um conjunto bem básico de setas, permitindo a você digitar seu
      código sem todo o relatório de status.


      <pre>
       >> %w(braço do meu melhor amigo)
       => ["braço", "do", "meu", "melhor", "amigo"]
       >> 
      </pre>


      Ruby vem com alguns prompts.  O prompt *simple* visto acima.  O prompt *xmp* que não tem nenhum
      prompt e identa a seta de resposta.  (Deve ficar bom para impressão.)  Além disso, o prompt
      *null*, que elimina todos os prompts.  Defina o prompt fornecendo o nome dele na opção
      @--prompt@.  (Portanto, @irb --prompt null@.)


      Você também pode fazer seu próprio prompt.  O Irb é completamente customizável de dentro dele mesmo.
      O objeto @conf@ contém todas as configurações do Irb.  Algumas destas configurações são para o 
      controle do prompt.


      <pre>
       >> conf.methods.grep /prompt/
       => ["prompting?", "prompt_s", "prompt_s=", "prompt_c", "prompt_c=", 
           "prompt_i", "prompt_mode", "prompt_i=", "prompt_mode="]
      </pre>


      Vamos configurar nosso prompt para mostrar o número da linha com um pouquinho de decoração.


      <pre>
       >> conf.prompt_i = "%3n :> "           # o prompt normal
       >> conf.prompt_s = "%3n .%l "          # o prompt de continuação de string
       >> conf.prompt_c = "%3n .^ "           # o prompt de continuação de código
       >> conf.return_format = "    => %s\n"  # a seta de resposta
      </pre>


      Acima estão as quatro partes de um prompt Irb.  O prompt de continuação de string é mostrado quando
      uma string ainda está aberta quando você aperta _Enter_.  O @%3n@ descreve que o Irb deve reservar três
      caracteres para o número da linha.  O @%l@ guarda um lugar para mostrar o tipo da string que será
      continuada.  (Se você está continuando uma string de aspas duplas, ele mostra aspas duplas.  Se você
      está continuando uma expressão regular, ele mostra uma barra.)


      O resto são apenas símbolos para decorar o prompt.  Então, em caso de continuação de uma linha de código,
      eu mostro um acento circunflexo que aponta para a linha onde aquela linha de código começou. 


      Você pode ler mais sobre a customização do Irb e sobre salvar sua configuração num arquivo no 
      completo "guia para o Irb":http://www.ruby-doc.org/docs/ProgrammingRuby/html/irb.html, disponível no
      _Programming Ruby_, grátis-para-seus-olhos-de-Internet-perambulantes.


