    - Se Eu Já Não Tivesse Lhe Tratado Suficientemente Como Uma Criança: >

        Estou orgulhoso de você.   Qualquer um irá lhe contar o tanto que me orgulho de você.  Como eu
        continuo e continuou a falar sobre essa ótima pessoa anônima aí fora  que rola e lê e rola e lê.
        "Estas crianças," Eu lhes conto. "Cara, estas crianças tem coração.  Eu nunca..." E eu mal consigo
        terminar uma frase porque estou absolutamente mergulhado em lágrimas.


        E meu coração irradia um vermelho intenso sob minha pele translúcida e eles tiveram que me administrar
        10 mililitros de Javascript para me fazer voltar.  (Eu respondo bem a toxinas no sangue.)  Cara, esse negócio
        vai chutar para longe das suas guelras!


        Bem, sim.  Você está indo bem.  Mas agora eu devo começar a ser um bruto professor secundário.
        Preciso começar a ver boas notas suas.  Até agora, você não fez nada mais do que olhar para cima
        e para baixo.  Ok, claro, você fez excepcionais leituras em voz alta anteriormente.  Agora nós precisamos
        de habilidade de compreensão aqui, Smotchkkiss.


        *Diga em voz alta cada parte do discurso usada abaixo.*


        bq. @5.times { print "Odelay!" }@


        Você pode querer até mesmo cobrir este parágrafo enquanto lê, porque seus olhos podem esquivar-se para
        olhar a resposta.  Nós temos um _número_ @5@, seguido por um _método_ @.times@.  Depois, a primeira
        garra de caranguejo de um _bloco_.  O _método_ do kernel @print@ não tem ponto e é seguido por uma _string_
        @"Odelay!"@.  A garra de caranguejo final fecha nosso _bloco_.


        *Diga em voz alta cada parte do discurso usada abaixo.*


        bq. @exit unless "restaurante".include? "aura"@


        Assim como o método @print@, @exit@ é um _método_ do kernel.  Se você prestou atenção na grande lista de 
        palavras reservadas, você saberá que @unless@ é uma dessas _palavras reservadas_.  A _string_ @"restaurante"@
         está unida ao _método_ @include?@.  E no final, a string @"aura"@.


        *Diga em voz alta cada parte do discurso usada abaixo.*


        <pre>['torrada', 'queijo', 'vinho'].each { |alimento| print( alimento.capitalize ) }</pre>


        Esta centopéia partilha finas iguarias.  Um _array_ inicia o exemplo.  No array, três
        _strings_ @'torrada'@, @'queijo'@ e @'vinho'@.  Todo o array é seguido por um _método_ @each@.  


        Dentro de um _bloco_, o _argumento do bloco_ @alimento@, descendo seu tobo-água dentro do bloco.
        O _método_ @capitalize@ então passa pra maiúscula a primeira letra do argumento do bloco, a qual 
        inicia a _variável_ @alimento@.  Esta _string_ com a inicial em maiúscula é passada para o _método_ @print@ do kernel.


        Olhe para os exemplos mais uma vez.  Tenha certeza de que você reconhece todas as partes do discurso usadas.
        Elas são bem distintas, não?  Respire profundamente, aperte firmemente suas têmporas. Pronto, agora vamos
        dissecar código tão valioso quanto um olho de vaca.



